"""
Interface Web SIMPLES para busca de jurisprud√™ncia
Usando Streamlit
"""

import streamlit as st
import sys
import os
sys.path.append('.')
from src.rag.simple_search import SimpleSearchEngine

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title='Busca de Jurisprud√™ncia TJSP',
    page_icon='‚öñÔ∏è',
    layout='wide'
)

# Carregar sistema apenas uma vez (cache)
@st.cache_resource
def load_search_engine():
    """Carrega o sistema de busca (cached)"""
    with st.spinner('üöÄ Carregando sistema de busca...'):
        return SimpleSearchEngine()

def display_results(results):
    """
    Exibe os resultados da busca de forma organizada
    
    Args:
        results: Lista de resultados da busca
    """
    if not results:
        st.warning("‚ùå Nenhum resultado encontrado para sua consulta.")
        st.info("üí° **Dicas:**\n- Tente palavras-chave diferentes\n- Use termos jur√≠dicos como 'dano moral', 'indeniza√ß√£o', 'negativa√ß√£o'\n- Seja mais espec√≠fico ou mais geral")
        return
    
    st.success(f"‚úÖ Encontrados **{len(results)}** resultados relevantes")
    
    # Exibir cada resultado
    for i, result in enumerate(results):
        with st.container():
            # Header do resultado
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.markdown(f"### üìÑ Resultado #{result['rank']}")
                st.markdown(f"**üìÅ Arquivo:** `{result['metadata']['file']}`")
            
            with col2:
                # Score com cor baseada na relev√¢ncia
                score = result['score']
                if score > 0.7:
                    score_color = "üü¢"
                elif score > 0.5:
                    score_color = "üü°"
                else:
                    score_color = "üü†"
                
                st.markdown(f"**Relev√¢ncia:** {score_color} {score:.3f}")
            
            # Conte√∫do do resultado
            st.markdown("**üìù Trecho encontrado:**")
            st.markdown(f"> {result['text']}")
            
            # Separador visual
            if i < len(results) - 1:
                st.divider()

def main():
    """Interface principal"""
    
    # Header bonito
    st.markdown("""
    <div style='text-align: center; padding: 20px;'>
        <h1>‚öñÔ∏è Busca de Jurisprud√™ncia TJSP</h1>
        <h3>Sistema de Busca Sem√¢ntica em Ac√≥rd√£os sobre Negativa√ß√£o Indevida</h3>
        <p style='color: #666; font-size: 16px;'>
            Encontre rapidamente trechos relevantes em 10 ac√≥rd√£os do Tribunal de Justi√ßa de S√£o Paulo
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    st.divider()
    
    # Se√ß√£o de busca
    st.markdown("## üîç Fa√ßa sua consulta")
    
    # Campo de entrada principal
    col1, col2 = st.columns([4, 1])
    
    with col1:
        query = st.text_input(
            "Digite sua pergunta:",
            placeholder="Ex: negativa√ß√£o indevida banco, dano moral indeniza√ß√£o, valor da condena√ß√£o...",
            label_visibility="collapsed"
        )
    
    with col2:
        search_button = st.button("üîç Buscar", type="primary", use_container_width=True)
    
    # Bot√µes de exemplo
    st.markdown("**üí° Ou teste com estas consultas de exemplo:**")
    
    col1, col2, col3, col4 = st.columns(4)
    
    example_queries = [
        "negativa√ß√£o indevida banco",
        "dano moral indeniza√ß√£o",
        "serasa spc nome",
        "valor da condena√ß√£o"
    ]
    
    selected_example = None
    
    with col1:
        if st.button("üè¶ Negativa√ß√£o Indevida", use_container_width=True):
            selected_example = example_queries[0]
    
    with col2:
        if st.button("üí∞ Dano Moral", use_container_width=True):
            selected_example = example_queries[1]
    
    with col3:
        if st.button("üìã Serasa/SPC", use_container_width=True):
            selected_example = example_queries[2]
    
    with col4:
        if st.button("‚öñÔ∏è Condena√ß√£o", use_container_width=True):
            selected_example = example_queries[3]
    
    # Usar query selecionada se houver
    if selected_example:
        query = selected_example
        st.rerun()
    
    # Executar busca
    if search_button or selected_example:
        if not query.strip():
            st.error("‚ùå Por favor, digite uma consulta!")
            return
        
        try:
            # Carregar sistema de busca
            search_engine = load_search_engine()
            
            # Executar busca
            with st.spinner(f'üîç Buscando por: "{query}"...'):
                results = search_engine.search(query, top_k=5)
            
            # Exibir resultados
            st.divider()
            st.markdown("## üìä Resultados da Busca")
            display_results(results)
            
        except Exception as e:
            st.error(f"‚ùå Erro ao realizar busca: {str(e)}")
    
    # Sidebar com informa√ß√µes
    with st.sidebar:
        st.markdown("## ‚ÑπÔ∏è Sobre o Sistema")
        
        st.markdown("""
        **üìö Base de Dados:**
        - 10 ac√≥rd√£os do TJSP
        - Tema: Negativa√ß√£o Indevida
        - 209 trechos indexados
        
        **üîß Tecnologia:**
        - Busca sem√¢ntica
        - Sentence Transformers
        - Embeddings de 384 dimens√µes
        
        **üéØ Como usar:**
        1. Digite sua pergunta
        2. Clique em "Buscar"
        3. Analise os resultados por relev√¢ncia
        
        **üí° Dicas:**
        - Use termos jur√≠dicos espec√≠ficos
        - Combine palavras-chave
        - Scores >0.5 s√£o mais relevantes
        """)
        
        st.divider()
        
        st.markdown("## üìà Estat√≠sticas")
        try:
            search_engine = load_search_engine()
            st.metric("Documentos", "10")
            st.metric("Chunks", len(search_engine.chunks))
            st.metric("Modelo", "all-MiniLM-L6-v2")
        except:
            st.info("Sistema carregando...")

if __name__ == "__main__":
    main()