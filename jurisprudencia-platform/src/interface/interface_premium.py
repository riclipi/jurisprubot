"""
üöÄ INTERFACE PREMIUM - FUNCIONALIDADES AVAN√áADAS
Sistema que supera o Justino C√≠vel em recursos
"""

import streamlit as st
import sys
import os
import time
import json
from datetime import datetime
from pathlib import Path
import tempfile

# Adicionar ao path
sys.path.append('.')

# Importar nossos m√≥dulos avan√ßados
from src.minutas.gerador_minutas import GeradorMinutas, PeticaoAnalise, MinutaGerada
from src.extracao.extrator_estruturado import ExtratorEstruturado, DocumentoEstruturado
from src.analise.analisador_juridico import AnalisadorJuridico, AnaliseJuridicaCompleta

class InterfacePremium:
    """
    üéØ INTERFACE PREMIUM COMPLETA
    Todas as funcionalidades avan√ßadas em uma interface √∫nica
    """
    
    def __init__(self):
        self.gerador_minutas = GeradorMinutas()
        self.extrator = ExtratorEstruturado()
        self.analisador = AnalisadorJuridico()
        self._setup_session_state()
    
    def _setup_session_state(self):
        """Configura estado da sess√£o"""
        if 'documentos_analisados' not in st.session_state:
            st.session_state.documentos_analisados = []
        
        if 'minutas_geradas' not in st.session_state:
            st.session_state.minutas_geradas = []
        
        if 'analises_realizadas' not in st.session_state:
            st.session_state.analises_realizadas = []
    
    def render_interface_completa(self):
        """Renderiza interface completa"""
        
        st.markdown("""
        <div style='text-align: center; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 15px; margin-bottom: 20px; color: white;'>
            <h1 style='margin: 0; font-size: 2.2em;'>üöÄ JURISPRUD√äNCIA AI PREMIUM</h1>
            <h3 style='margin: 10px 0 0 0; opacity: 0.9;'>Sistema Avan√ßado que Supera o Justino C√≠vel</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Tabs principais
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìã An√°lise de Peti√ß√µes", 
            "üìù Gerador de Minutas", 
            "üß† An√°lise Jur√≠dica",
            "üìä Dashboard Premium",
            "‚öôÔ∏è Configura√ß√µes"
        ])
        
        with tab1:
            self._render_analise_peticoes()
        
        with tab2:
            self._render_gerador_minutas()
        
        with tab3:
            self._render_analise_juridica()
        
        with tab4:
            self._render_dashboard_premium()
        
        with tab5:
            self._render_configuracoes()
    
    def _render_analise_peticoes(self):
        """Aba de an√°lise de peti√ß√µes"""
        
        st.markdown("## üìã An√°lise Estruturada de Peti√ß√µes")
        st.markdown("**Funcionalidade:** Extrai automaticamente partes, pedidos, fundamentos e gera relat√≥rio completo")
        
        # Upload de arquivo ou entrada de texto
        col1, col2 = st.columns([2, 1])
        
        with col1:
            input_method = st.radio(
                "M√©todo de entrada:",
                ["üìù Texto direto", "üìÅ Upload de arquivo"],
                horizontal=True
            )
        
        with col2:
            st.markdown("### üìä Estat√≠sticas")
            st.metric("Documentos Analisados", len(st.session_state.documentos_analisados))
        
        texto_peticao = ""
        
        if input_method == "üìù Texto direto":
            texto_peticao = st.text_area(
                "Cole o texto da peti√ß√£o:",
                height=300,
                placeholder="Cole aqui o texto completo da peti√ß√£o inicial..."
            )
        
        else:  # Upload de arquivo
            uploaded_file = st.file_uploader(
                "Fa√ßa upload da peti√ß√£o:",
                type=['txt', 'pdf', 'docx'],
                help="Formatos aceitos: TXT, PDF, DOCX"
            )
            
            if uploaded_file:
                if uploaded_file.type == "text/plain":
                    texto_peticao = str(uploaded_file.read(), "utf-8")
                else:
                    st.warning("‚ö†Ô∏è Para PDFs e DOCX, cole o texto manualmente por enquanto")
        
        # Bot√£o de an√°lise
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col2:
            analisar_clicked = st.button(
                "üîç ANALISAR PETI√á√ÉO",
                type="primary",
                use_container_width=True,
                disabled=not texto_peticao.strip()
            )
        
        # Processar an√°lise
        if analisar_clicked and texto_peticao.strip():
            with st.spinner("üîÑ Analisando peti√ß√£o... Isso pode levar alguns segundos"):
                
                # Barra de progresso
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Etapa 1: Extra√ß√£o estruturada
                status_text.text("üìä Extraindo informa√ß√µes estruturadas...")
                progress_bar.progress(25)
                time.sleep(1)
                
                documento = self.extrator.extrair_documento_completo(texto_peticao)
                
                # Etapa 2: An√°lise de completude
                status_text.text("üìã Analisando completude dos requisitos...")
                progress_bar.progress(50)
                time.sleep(1)
                
                # Etapa 3: Gera√ß√£o de relat√≥rio
                status_text.text("üìÑ Gerando relat√≥rio detalhado...")
                progress_bar.progress(75)
                time.sleep(1)
                
                # Etapa 4: Finaliza√ß√£o
                status_text.text("‚úÖ An√°lise conclu√≠da!")
                progress_bar.progress(100)
                time.sleep(0.5)
                
                # Limpar progresso
                progress_bar.empty()
                status_text.empty()
                
                # Salvar na sess√£o
                st.session_state.documentos_analisados.append(documento)
                
                # Exibir resultados
                self._exibir_resultados_analise(documento)
    
    def _exibir_resultados_analise(self, documento: DocumentoEstruturado):
        """Exibe resultados da an√°lise"""
        
        st.success("‚úÖ An√°lise conclu√≠da com sucesso!")
        
        # Resumo executivo
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "üìä Completude",
                f"{documento.completude_score:.1%}",
                delta=f"{documento.completude_score - 0.7:.1%}" if documento.completude_score > 0.7 else None
            )
        
        with col2:
            st.metric("üìã Pedidos", len(documento.pedidos))
        
        with col3:
            st.metric("üìö Fundamentos", len(documento.fundamentos_legais))
        
        with col4:
            st.metric("‚ö†Ô∏è Problemas", len(documento.problemas_identificados))
        
        st.divider()
        
        # Tabs de detalhamento
        tab1, tab2, tab3, tab4 = st.tabs([
            "üë• Partes Processuais",
            "üìã Pedidos & Fundamentos", 
            "üîç An√°lise de Qualidade",
            "üìÑ Relat√≥rio Completo"
        ])
        
        with tab1:
            self._exibir_partes_processuais(documento)
        
        with tab2:
            self._exibir_pedidos_fundamentos(documento)
        
        with tab3:
            self._exibir_analise_qualidade(documento)
        
        with tab4:
            self._exibir_relatorio_completo(documento)
    
    def _exibir_partes_processuais(self, documento: DocumentoEstruturado):
        """Exibe informa√ß√µes das partes processuais"""
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üë§ AUTOR")
            st.write(f"**Nome:** {documento.autor.nome}")
            st.write(f"**Tipo:** {documento.autor.tipo.replace('_', ' ').title()}")
            
            if documento.autor.cpf_cnpj:
                st.write(f"**CPF/CNPJ:** {documento.autor.cpf_cnpj}")
            
            if documento.autor.endereco:
                st.write(f"**Endere√ßo:** {documento.autor.endereco}")
            
            qualif_status = "‚úÖ Completa" if documento.autor.qualificacao_completa else "‚ö†Ô∏è Incompleta"
            st.write(f"**Qualifica√ß√£o:** {qualif_status}")
        
        with col2:
            st.markdown("### üè¢ R√âU")
            st.write(f"**Nome:** {documento.reu.nome}")
            st.write(f"**Tipo:** {documento.reu.tipo.replace('_', ' ').title()}")
            
            if documento.reu.cpf_cnpj:
                st.write(f"**CPF/CNPJ:** {documento.reu.cpf_cnpj}")
            
            qualif_status = "‚úÖ Completa" if documento.reu.qualificacao_completa else "‚ö†Ô∏è Incompleta"
            st.write(f"**Qualifica√ß√£o:** {qualif_status}")
        
        # Informa√ß√µes processuais
        st.markdown("### ‚öñÔ∏è Informa√ß√µes Processuais")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.write(f"**Tipo de A√ß√£o:** {documento.tipo_acao}")
        
        with col2:
            st.write(f"**Compet√™ncia:** {documento.competencia_sugerida}")
        
        with col3:
            st.write(f"**Valor da Causa:** {documento.valor_causa or 'N√£o especificado'}")
    
    def _exibir_pedidos_fundamentos(self, documento: DocumentoEstruturado):
        """Exibe pedidos e fundamentos"""
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"### üìã PEDIDOS ({len(documento.pedidos)})")
            
            if documento.pedidos:
                for i, pedido in enumerate(documento.pedidos, 1):
                    with st.expander(f"Pedido {i} - {pedido.categoria.title()}"):
                        st.write(f"**Tipo:** {pedido.tipo.title()}")
                        st.write(f"**Descri√ß√£o:** {pedido.descricao}")
                        
                        if pedido.valor_monetario:
                            st.write(f"**Valor:** {pedido.valor_monetario}")
                        
                        if pedido.prazo:
                            st.write(f"**Prazo:** {pedido.prazo}")
            else:
                st.warning("‚ö†Ô∏è Nenhum pedido identificado")
        
        with col2:
            st.markdown(f"### üìö FUNDAMENTOS LEGAIS ({len(documento.fundamentos_legais)})")
            
            if documento.fundamentos_legais:
                # Agrupar por categoria
                fundamentos_por_categoria = {}
                for fund in documento.fundamentos_legais:
                    categoria = fund.categoria
                    if categoria not in fundamentos_por_categoria:
                        fundamentos_por_categoria[categoria] = []
                    fundamentos_por_categoria[categoria].append(fund)
                
                for categoria, fundamentos in fundamentos_por_categoria.items():
                    with st.expander(f"{categoria.title()} ({len(fundamentos)})"):
                        for fund in fundamentos:
                            st.write(f"‚Ä¢ **{fund.tipo.title()}:** {fund.referencia}")
            else:
                st.warning("‚ö†Ô∏è Nenhuma fundamenta√ß√£o legal identificada")
    
    def _exibir_analise_qualidade(self, documento: DocumentoEstruturado):
        """Exibe an√°lise de qualidade"""
        
        # Score geral
        st.markdown("### üìä An√°lise de Qualidade")
        
        # Barra de progresso visual para completude
        completude_percent = int(documento.completude_score * 100)
        
        if completude_percent >= 80:
            color = "üü¢"
            status = "EXCELENTE"
        elif completude_percent >= 60:
            color = "üü°"
            status = "BOM"
        elif completude_percent >= 40:
            color = "üü†"
            status = "REGULAR"
        else:
            color = "üî¥"
            status = "NECESSITA MELHORIAS"
        
        st.markdown(f"""
        **{color} Status Geral: {status}**
        
        Completude: {completude_percent}%
        """)
        
        st.progress(documento.completude_score)
        
        # Problemas identificados
        if documento.problemas_identificados:
            st.markdown("### ‚ö†Ô∏è Problemas Identificados")
            for problema in documento.problemas_identificados:
                st.error(f"‚ùå {problema}")
        
        # Sugest√µes de melhoria
        if documento.sugestoes_melhoria:
            st.markdown("### üí° Sugest√µes de Melhoria")
            for sugestao in documento.sugestoes_melhoria:
                st.info(f"üí° {sugestao}")
        
        # Estat√≠sticas do documento
        st.markdown("### üìà Estat√≠sticas do Documento")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Palavras", documento.estatisticas['palavras'])
        
        with col2:
            st.metric("Par√°grafos", documento.estatisticas['paragrafos'])
        
        with col3:
            st.metric("Complexidade", documento.estatisticas['complexidade'].title())
        
        with col4:
            st.metric("Densidade Legal", f"{documento.estatisticas['densidade_legal']:.2f}")
    
    def _exibir_relatorio_completo(self, documento: DocumentoEstruturado):
        """Exibe e permite download do relat√≥rio completo"""
        
        st.markdown("### üìÑ Relat√≥rio Completo")
        
        # Gerar relat√≥rio
        relatorio = self.extrator.gerar_relatorio_analise(documento)
        
        # Exibir relat√≥rio
        st.markdown(relatorio)
        
        # Bot√µes de a√ß√£o
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Download como Markdown
            st.download_button(
                label="üì• Download Relat√≥rio (MD)",
                data=relatorio,
                file_name=f"relatorio_{documento.id_documento}.md",
                mime="text/markdown"
            )
        
        with col2:
            # Salvar como JSON
            if st.button("üíæ Exportar JSON"):
                temp_path = f"/tmp/documento_{documento.id_documento}.json"
                self.extrator.exportar_json(documento, temp_path)
                st.success(f"‚úÖ Exportado para: {temp_path}")
        
        with col3:
            # Gerar minuta baseada na an√°lise
            if st.button("üìù Gerar Minuta"):
                st.session_state.documento_para_minuta = documento
                st.info("üìù Documento selecionado para gera√ß√£o de minuta. V√° para a aba 'Gerador de Minutas'")
    
    def _render_gerador_minutas(self):
        """Aba do gerador de minutas"""
        
        st.markdown("## üìù Gerador de Minutas Jur√≠dicas")
        st.markdown("**Funcionalidade:** Gera automaticamente despachos, senten√ßas e decis√µes baseadas na an√°lise da peti√ß√£o")
        
        # Verificar se h√° documento selecionado
        documento_selecionado = None
        if hasattr(st.session_state, 'documento_para_minuta'):
            documento_selecionado = st.session_state.documento_para_minuta
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            if documento_selecionado:
                st.success(f"‚úÖ Documento selecionado: {documento_selecionado.id_documento}")
                st.write(f"**Tipo de A√ß√£o:** {documento_selecionado.tipo_acao}")
                st.write(f"**Autor:** {documento_selecionado.autor.nome}")
                st.write(f"**R√©u:** {documento_selecionado.reu.nome}")
            else:
                st.info("üí° Primeiro analise uma peti√ß√£o na aba 'An√°lise de Peti√ß√µes' ou insira texto manualmente abaixo")
        
        with col2:
            st.markdown("### üìä Estat√≠sticas")
            st.metric("Minutas Geradas", len(st.session_state.minutas_geradas))
        
        # Op√ß√£o de entrada manual
        if not documento_selecionado:
            st.markdown("### ‚úçÔ∏è Entrada Manual")
            
            with st.expander("üìù Inserir dados manualmente"):
                col1, col2 = st.columns(2)
                
                with col1:
                    autor_manual = st.text_input("Nome do Autor:")
                    tipo_acao_manual = st.selectbox(
                        "Tipo de A√ß√£o:",
                        ["indeniza√ß√£o por danos morais", "a√ß√£o de cobran√ßa", "a√ß√£o consignat√≥ria", "revis√£o contrato banc√°rio"]
                    )
                
                with col2:
                    reu_manual = st.text_input("Nome do R√©u:")
                    valor_causa_manual = st.text_input("Valor da Causa (opcional):")
                
                if st.button("‚úÖ Usar Dados Manuais"):
                    # Criar an√°lise simples
                    from src.minutas.gerador_minutas import PeticaoAnalise
                    
                    documento_selecionado = PeticaoAnalise(
                        autor=autor_manual,
                        reu=reu_manual,
                        tipo_acao=tipo_acao_manual,
                        pedidos=["Pedido principal"],
                        fundamentos=["Fundamenta√ß√£o b√°sica"],
                        valor_causa=valor_causa_manual,
                        competencia="Vara C√≠vel",
                        requisitos_preenchidos={"basico": True},
                        provas_necessarias=["Documentos b√°sicos"],
                        recomendacoes=[]
                    )
        
        # Configura√ß√µes da minuta
        if documento_selecionado:
            st.markdown("### ‚öôÔ∏è Configura√ß√µes da Minuta")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                tipo_minuta = st.selectbox(
                    "Tipo de Documento:",
                    ["despacho_saneador", "sentenca_procedencia", "despacho_diligencias"],
                    format_func=lambda x: {
                        "despacho_saneador": "üîç Despacho Saneador",
                        "sentenca_procedencia": "‚öñÔ∏è Senten√ßa de Proced√™ncia", 
                        "despacho_diligencias": "üìã Despacho de Dilig√™ncias"
                    }[x]
                )
            
            with col2:
                magistrado = st.text_input("Nome do Magistrado:", "[NOME DO MAGISTRADO]")
            
            with col3:
                comarca = st.text_input("Comarca:", "S√£o Paulo")
            
            # Bot√£o de gera√ß√£o
            if st.button("üöÄ GERAR MINUTA", type="primary", use_container_width=True):
                with st.spinner("üìù Gerando minuta personalizada..."):
                    
                    # Converter documento se necess√°rio
                    if hasattr(documento_selecionado, 'autor') and hasattr(documento_selecionado.autor, 'nome'):
                        # √â um DocumentoEstruturado
                        analise = PeticaoAnalise(
                            autor=documento_selecionado.autor.nome,
                            reu=documento_selecionado.reu.nome,
                            tipo_acao=documento_selecionado.tipo_acao,
                            pedidos=[p.descricao for p in documento_selecionado.pedidos],
                            fundamentos=[f.referencia for f in documento_selecionado.fundamentos_legais],
                            valor_causa=documento_selecionado.valor_causa,
                            competencia=documento_selecionado.competencia_sugerida,
                            requisitos_preenchidos={},
                            provas_necessarias=[],
                            recomendacoes=[]
                        )
                    else:
                        # √â uma PeticaoAnalise
                        analise = documento_selecionado
                    
                    # Gerar minuta
                    minuta = self.gerador_minutas.gerar_minuta(analise, tipo_minuta)
                    
                    # Salvar na sess√£o
                    st.session_state.minutas_geradas.append(minuta)
                    
                    st.success("‚úÖ Minuta gerada com sucesso!")
                    
                    # Exibir minuta
                    self._exibir_minuta_gerada(minuta)
    
    def _exibir_minuta_gerada(self, minuta: MinutaGerada):
        """Exibe minuta gerada"""
        
        st.markdown("### üìÑ Minuta Gerada")
        
        # Informa√ß√µes da minuta
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.write(f"**Tipo:** {minuta.tipo_documento.replace('_', ' ').title()}")
        
        with col2:
            st.write(f"**Gerado em:** {minuta.data_geracao.strftime('%d/%m/%Y %H:%M')}")
        
        with col3:
            st.write(f"**Fundamentos:** {len(minuta.fundamentacao_legal)}")
        
        # Conte√∫do da minuta
        st.markdown("#### üìù Conte√∫do")
        st.text_area(
            "Minuta:",
            value=minuta.conteudo,
            height=400,
            disabled=True
        )
        
        # Informa√ß√µes adicionais
        with st.expander("üìö Fundamenta√ß√£o Legal"):
            for fund in minuta.fundamentacao_legal:
                st.write(f"‚Ä¢ {fund}")
        
        with st.expander("‚öñÔ∏è Jurisprud√™ncia Aplic√°vel"):
            for jur in minuta.jurisprudencia_aplicavel:
                st.write(f"‚Ä¢ {jur}")
        
        with st.expander("üí° Observa√ß√µes"):
            for obs in minuta.observacoes:
                st.write(f"‚Ä¢ {obs}")
        
        # Bot√µes de a√ß√£o
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Download da minuta
            conteudo_completo = f"""
{minuta.conteudo}

---

FUNDAMENTA√á√ÉO LEGAL:
{chr(10).join(f'‚Ä¢ {f}' for f in minuta.fundamentacao_legal)}

JURISPRUD√äNCIA APLIC√ÅVEL:
{chr(10).join(f'‚Ä¢ {j}' for j in minuta.jurisprudencia_aplicavel)}

OBSERVA√á√ïES:
{chr(10).join(f'‚Ä¢ {o}' for o in minuta.observacoes)}

---
Gerado em: {minuta.data_geracao.strftime('%d/%m/%Y %H:%M')}
            """
            
            st.download_button(
                label="üì• Download Minuta",
                data=conteudo_completo,
                file_name=f"minuta_{minuta.tipo_documento}_{minuta.data_geracao.strftime('%Y%m%d_%H%M')}.txt",
                mime="text/plain"
            )
        
        with col2:
            if st.button("üìß Enviar por Email"):
                st.info("üöß Funcionalidade em desenvolvimento")
        
        with col3:
            if st.button("üñ®Ô∏è Formatar para Impress√£o"):
                st.info("üöß Funcionalidade em desenvolvimento")
    
    def _render_analise_juridica(self):
        """Aba de an√°lise jur√≠dica avan√ßada"""
        
        st.markdown("## üß† An√°lise Jur√≠dica Avan√ßada")
        st.markdown("**Funcionalidade:** Analisa probabilidade de sucesso, riscos e gera recomenda√ß√µes estrat√©gicas")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Entrada de texto para an√°lise
            texto_analise = st.text_area(
                "Texto da peti√ß√£o para an√°lise jur√≠dica:",
                height=300,
                placeholder="Cole aqui o texto da peti√ß√£o para an√°lise jur√≠dica completa..."
            )
            
            tipo_acao_analise = st.selectbox(
                "Tipo de a√ß√£o:",
                [
                    "indeniza√ß√£o por danos morais",
                    "a√ß√£o de cobran√ßa", 
                    "revis√£o contrato banc√°rio",
                    "a√ß√£o consignat√≥ria"
                ]
            )
        
        with col2:
            st.markdown("### üìä Estat√≠sticas")
            st.metric("An√°lises Realizadas", len(st.session_state.analises_realizadas))
            
            # √öltimas an√°lises
            if st.session_state.analises_realizadas:
                st.markdown("#### üïí √öltima An√°lise")
                ultima = st.session_state.analises_realizadas[-1]
                st.write(f"**Score:** {ultima.score_geral}/10")
                st.write(f"**Risco:** {ultima.nivel_risco.value.title()}")
                st.write(f"**Sucesso:** {ultima.analise_probabilidade.exito_total:.1%}")
        
        # Bot√£o de an√°lise
        if st.button("üß† REALIZAR AN√ÅLISE JUR√çDICA", type="primary", use_container_width=True, disabled=not texto_analise.strip()):
            
            with st.spinner("üîÑ Realizando an√°lise jur√≠dica completa..."):
                # Barra de progresso
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Etapa 1: An√°lise de requisitos
                status_text.text("üìã Analisando requisitos legais...")
                progress_bar.progress(20)
                time.sleep(1)
                
                # Etapa 2: C√°lculo de probabilidades
                status_text.text("üìä Calculando probabilidade de sucesso...")
                progress_bar.progress(40)
                time.sleep(1)
                
                # Etapa 3: An√°lise de riscos
                status_text.text("‚ö†Ô∏è Identificando riscos e oportunidades...")
                progress_bar.progress(60)
                time.sleep(1)
                
                # Etapa 4: Gera√ß√£o de recomenda√ß√µes
                status_text.text("üí° Gerando recomenda√ß√µes estrat√©gicas...")
                progress_bar.progress(80)
                time.sleep(1)
                
                # Realizar an√°lise
                analise = self.analisador.analisar_caso_completo(texto_analise, tipo_acao_analise)
                
                # Etapa 5: Finaliza√ß√£o
                status_text.text("‚úÖ An√°lise jur√≠dica conclu√≠da!")
                progress_bar.progress(100)
                time.sleep(0.5)
                
                # Limpar progresso
                progress_bar.empty()
                status_text.empty()
                
                # Salvar na sess√£o
                st.session_state.analises_realizadas.append(analise)
                
                # Exibir resultados
                self._exibir_analise_juridica_completa(analise)
    
    def _exibir_analise_juridica_completa(self, analise: AnaliseJuridicaCompleta):
        """Exibe an√°lise jur√≠dica completa"""
        
        st.success("‚úÖ An√°lise jur√≠dica conclu√≠da!")
        
        # Resumo executivo
        st.markdown("### üìä Resumo Executivo")
        st.markdown(analise.resumo_executivo)
        
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            score_color = "üü¢" if analise.score_geral >= 7 else "üü°" if analise.score_geral >= 5 else "üî¥"
            st.metric("Score Geral", f"{analise.score_geral}/10", delta=None)
            st.markdown(f"**{score_color} Qualidade**")
        
        with col2:
            st.metric("Probabilidade Sucesso", f"{analise.analise_probabilidade.exito_total:.1%}")
        
        with col3:
            risco_color = {"baixo": "üü¢", "medio": "üü°", "alto": "üü†", "critico": "üî¥"}[analise.nivel_risco.value]
            st.metric("N√≠vel de Risco", f"{risco_color} {analise.nivel_risco.value.title()}")
        
        with col4:
            st.metric("Requisitos Atendidos", f"{analise.percentual_atendimento:.1%}")
        
        st.divider()
        
        # Tabs detalhadas
        tab1, tab2, tab3, tab4 = st.tabs([
            "üìã Requisitos Legais",
            "üìä An√°lise de Probabilidade",
            "üí° Recomenda√ß√µes",
            "üìÑ Relat√≥rio Completo"
        ])
        
        with tab1:
            self._exibir_requisitos_legais(analise)
        
        with tab2:
            self._exibir_analise_probabilidade(analise)
        
        with tab3:
            self._exibir_recomendacoes_estrategicas(analise)
        
        with tab4:
            self._exibir_relatorio_analise_juridica(analise)
    
    def _exibir_requisitos_legais(self, analise: AnaliseJuridicaCompleta):
        """Exibe an√°lise de requisitos legais"""
        
        st.markdown("### üìã An√°lise de Requisitos Legais")
        
        # Separar obrigat√≥rios e opcionais
        obrigatorios = [r for r in analise.requisitos_legais if r.obrigatorio]
        opcionais = [r for r in analise.requisitos_legais if not r.obrigatorio]
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### ‚ö†Ô∏è Requisitos Obrigat√≥rios")
            
            for req in obrigatorios:
                status_icon = "‚úÖ" if req.atendido else "‚ùå"
                st.markdown(f"**{status_icon} {req.nome.replace('_', ' ').title()}**")
                st.write(f"üìù {req.descricao}")
                
                if req.observacoes:
                    st.info(f"üí° {req.observacoes}")
                
                if req.evidencias:
                    st.write(f"üîç Evid√™ncias: {', '.join(req.evidencias)}")
                
                st.divider()
        
        with col2:
            st.markdown("#### ‚≠ï Requisitos Opcionais")
            
            for req in opcionais:
                status_icon = "‚úÖ" if req.atendido else "‚≠ï"
                st.markdown(f"**{status_icon} {req.nome.replace('_', ' ').title()}**")
                st.write(f"üìù {req.descricao}")
                
                if req.observacoes:
                    st.info(f"üí° {req.observacoes}")
                
                st.divider()
    
    def _exibir_analise_probabilidade(self, analise: AnaliseJuridicaCompleta):
        """Exibe an√°lise de probabilidade"""
        
        prob = analise.analise_probabilidade
        
        st.markdown("### üìä An√°lise de Probabilidade de Sucesso")
        
        # Gr√°fico de probabilidades
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("üéØ √äxito Total", f"{prob.exito_total:.1%}")
            st.progress(prob.exito_total)
        
        with col2:
            st.metric("‚öñÔ∏è √äxito Parcial", f"{prob.exito_parcial:.1%}")
            st.progress(prob.exito_parcial)
        
        with col3:
            st.metric("‚ö†Ô∏è Risco Improced√™ncia", f"{prob.risco_improcedencia:.1%}")
            st.progress(prob.risco_improcedencia)
        
        # Fatores de influ√™ncia
        col1, col2 = st.columns(2)
        
        with col1:
            if prob.fatores_positivos:
                st.markdown("#### ‚úÖ Fatores Favor√°veis")
                for fator in prob.fatores_positivos:
                    st.success(f"‚úÖ {fator}")
        
        with col2:
            if prob.fatores_negativos:
                st.markdown("#### ‚ùå Fatores Desfavor√°veis")
                for fator in prob.fatores_negativos:
                    st.error(f"‚ùå {fator}")
        
        # Precedentes
        if prob.precedentes_favoraveis:
            st.markdown("#### üìö Precedentes Aplic√°veis")
            for precedente in prob.precedentes_favoraveis:
                st.info(f"üìö {precedente}")
    
    def _exibir_recomendacoes_estrategicas(self, analise: AnaliseJuridicaCompleta):
        """Exibe recomenda√ß√µes estrat√©gicas"""
        
        st.markdown(f"### üí° Recomenda√ß√µes Estrat√©gicas ({len(analise.recomendacoes)})")
        
        # Filtrar por prioridade
        alta_prioridade = [r for r in analise.recomendacoes if r.prioridade == "alta"]
        media_prioridade = [r for r in analise.recomendacoes if r.prioridade == "media"]
        baixa_prioridade = [r for r in analise.recomendacoes if r.prioridade == "baixa"]
        
        # Recomenda√ß√µes de alta prioridade
        if alta_prioridade:
            st.markdown("#### üî¥ Prioridade Alta")
            for rec in alta_prioridade:
                with st.expander(f"üî¥ {rec.titulo}"):
                    st.write(f"**Tipo:** {rec.tipo.value.title()}")
                    st.write(f"**Descri√ß√£o:** {rec.descricao}")
                    
                    if rec.prazo_sugerido:
                        st.write(f"**Prazo:** {rec.prazo_sugerido}")
                    
                    if rec.custo_estimado:
                        st.write(f"**Custo:** {rec.custo_estimado}")
                    
                    if rec.fundamentacao:
                        st.write("**Fundamenta√ß√£o:**")
                        for fund in rec.fundamentacao:
                            st.write(f"‚Ä¢ {fund}")
        
        # Recomenda√ß√µes de m√©dia prioridade
        if media_prioridade:
            st.markdown("#### üü° Prioridade M√©dia")
            for rec in media_prioridade:
                with st.expander(f"üü° {rec.titulo}"):
                    st.write(rec.descricao)
        
        # Recomenda√ß√µes de baixa prioridade  
        if baixa_prioridade:
            st.markdown("#### üü¢ Prioridade Baixa")
            for rec in baixa_prioridade:
                with st.expander(f"üü¢ {rec.titulo}"):
                    st.write(rec.descricao)
        
        # An√°lise estrat√©gica
        st.markdown("### üéØ An√°lise Estrat√©gica")
        
        estrategica = analise.analise_estrategica
        
        col1, col2 = st.columns(2)
        
        with col1:
            if estrategica.valor_estimado_condenacao:
                st.metric("üí∞ Valor Estimado", estrategica.valor_estimado_condenacao)
            
            st.metric("‚è±Ô∏è Tempo Estimado", estrategica.tempo_estimado_processo)
            st.metric("üí∏ Custas Estimadas", estrategica.custas_estimadas)
        
        with col2:
            if estrategica.estrategias_recomendadas:
                st.markdown("**üéØ Estrat√©gias Recomendadas:**")
                for estrategia in estrategica.estrategias_recomendadas:
                    st.write(f"‚Ä¢ {estrategia}")
            
            if estrategica.oportunidades:
                st.markdown("**üéâ Oportunidades:**")
                for oportunidade in estrategica.oportunidades:
                    st.write(f"‚Ä¢ {oportunidade}")
    
    def _exibir_relatorio_analise_juridica(self, analise: AnaliseJuridicaCompleta):
        """Exibe relat√≥rio completo da an√°lise jur√≠dica"""
        
        st.markdown("### üìÑ Relat√≥rio Completo")
        
        # Gerar relat√≥rio
        with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
            relatorio_path = f.name
        
        self.analisador.exportar_relatorio_completo(analise, relatorio_path)
        
        # Ler relat√≥rio
        with open(relatorio_path, 'r', encoding='utf-8') as f:
            relatorio_conteudo = f.read()
        
        # Exibir relat√≥rio
        st.markdown(relatorio_conteudo)
        
        # Bot√£o de download
        st.download_button(
            label="üì• Download Relat√≥rio Completo",
            data=relatorio_conteudo,
            file_name=f"analise_juridica_{analise.id_analise}.md",
            mime="text/markdown"
        )
    
    def _render_dashboard_premium(self):
        """Dashboard com estat√≠sticas e hist√≥rico"""
        
        st.markdown("## üìä Dashboard Premium")
        
        # Estat√≠sticas gerais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "üìã Documentos Analisados",
                len(st.session_state.documentos_analisados),
                delta=len(st.session_state.documentos_analisados)
            )
        
        with col2:
            st.metric(
                "üìù Minutas Geradas", 
                len(st.session_state.minutas_geradas),
                delta=len(st.session_state.minutas_geradas)
            )
        
        with col3:
            st.metric(
                "üß† An√°lises Jur√≠dicas",
                len(st.session_state.analises_realizadas),
                delta=len(st.session_state.analises_realizadas)
            )
        
        with col4:
            # Score m√©dio das an√°lises
            if st.session_state.analises_realizadas:
                score_medio = sum(a.score_geral for a in st.session_state.analises_realizadas) / len(st.session_state.analises_realizadas)
                st.metric("üìà Score M√©dio", f"{score_medio:.1f}/10")
            else:
                st.metric("üìà Score M√©dio", "0.0/10")
        
        st.divider()
        
        # Hist√≥rico detalhado
        tab1, tab2, tab3 = st.tabs([
            "üìã Hist√≥rico de An√°lises",
            "üìù Hist√≥rico de Minutas", 
            "üß† Hist√≥rico Jur√≠dico"
        ])
        
        with tab1:
            if st.session_state.documentos_analisados:
                st.markdown("### üìã Documentos Analisados")
                
                for i, doc in enumerate(reversed(st.session_state.documentos_analisados), 1):
                    with st.expander(f"üìÑ Documento {i} - {doc.tipo_acao}"):
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.write(f"**ID:** {doc.id_documento}")
                            st.write(f"**Autor:** {doc.autor.nome}")
                            st.write(f"**R√©u:** {doc.reu.nome}")
                        
                        with col2:
                            st.write(f"**Completude:** {doc.completude_score:.1%}")
                            st.write(f"**Pedidos:** {len(doc.pedidos)}")
                            st.write(f"**Fundamentos:** {len(doc.fundamentos_legais)}")
                        
                        with col3:
                            st.write(f"**Data:** {doc.data_analise.strftime('%d/%m/%Y %H:%M')}")
                            st.write(f"**Problemas:** {len(doc.problemas_identificados)}")
            else:
                st.info("üì≠ Nenhum documento analisado ainda")
        
        with tab2:
            if st.session_state.minutas_geradas:
                st.markdown("### üìù Minutas Geradas")
                
                for i, minuta in enumerate(reversed(st.session_state.minutas_geradas), 1):
                    with st.expander(f"üìù Minuta {i} - {minuta.tipo_documento.replace('_', ' ').title()}"):
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write(f"**Tipo:** {minuta.tipo_documento}")
                            st.write(f"**Data:** {minuta.data_geracao.strftime('%d/%m/%Y %H:%M')}")
                        
                        with col2:
                            st.write(f"**Fundamentos:** {len(minuta.fundamentacao_legal)}")
                            st.write(f"**Jurisprud√™ncia:** {len(minuta.jurisprudencia_aplicavel)}")
                        
                        # Preview do conte√∫do
                        preview = minuta.conteudo[:200] + "..." if len(minuta.conteudo) > 200 else minuta.conteudo
                        st.text_area("Preview:", value=preview, height=100, disabled=True)
            else:
                st.info("üì≠ Nenhuma minuta gerada ainda")
        
        with tab3:
            if st.session_state.analises_realizadas:
                st.markdown("### üß† An√°lises Jur√≠dicas")
                
                for i, analise in enumerate(reversed(st.session_state.analises_realizadas), 1):
                    with st.expander(f"üß† An√°lise {i} - {analise.tipo_acao}"):
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.write(f"**ID:** {analise.id_analise}")
                            st.write(f"**Score:** {analise.score_geral}/10")
                            st.write(f"**Risco:** {analise.nivel_risco.value.title()}")
                        
                        with col2:
                            st.write(f"**Sucesso:** {analise.analise_probabilidade.exito_total:.1%}")
                            st.write(f"**Requisitos:** {analise.percentual_atendimento:.1%}")
                            st.write(f"**Recomenda√ß√µes:** {len(analise.recomendacoes)}")
                        
                        with col3:
                            st.write(f"**Data:** {analise.data_analise.strftime('%d/%m/%Y %H:%M')}")
                            
                            if analise.analise_estrategica.valor_estimado_condenacao:
                                st.write(f"**Valor Est.:** {analise.analise_estrategica.valor_estimado_condenacao}")
            else:
                st.info("üì≠ Nenhuma an√°lise jur√≠dica realizada ainda")
    
    def _render_configuracoes(self):
        """Aba de configura√ß√µes"""
        
        st.markdown("## ‚öôÔ∏è Configura√ß√µes do Sistema")
        
        # Configura√ß√µes gerais
        st.markdown("### üîß Configura√ß√µes Gerais")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Configura√ß√µes de an√°lise
            st.markdown("#### üìä An√°lise de Documentos")
            
            nivel_analise = st.selectbox(
                "N√≠vel de an√°lise:",
                ["B√°sico", "Intermedi√°rio", "Avan√ßado"],
                index=2
            )
            
            incluir_sugestoes = st.checkbox("Incluir sugest√µes de melhoria", value=True)
            incluir_precedentes = st.checkbox("Buscar precedentes autom√°ticamente", value=True)
        
        with col2:
            # Configura√ß√µes de minutas
            st.markdown("#### üìù Gera√ß√£o de Minutas")
            
            magistrado_padrao = st.text_input("Magistrado padr√£o:", "[NOME DO MAGISTRADO]")
            comarca_padrao = st.text_input("Comarca padr√£o:", "S√£o Paulo")
            
            incluir_jurisprudencia = st.checkbox("Incluir jurisprud√™ncia nas minutas", value=True)
        
        st.divider()
        
        # Exporta√ß√£o e backup
        st.markdown("### üíæ Exporta√ß√£o e Backup")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üì§ Exportar Todos os Dados"):
                # Criar arquivo JSON com todos os dados
                dados_exportacao = {
                    "documentos_analisados": len(st.session_state.documentos_analisados),
                    "minutas_geradas": len(st.session_state.minutas_geradas),
                    "analises_realizadas": len(st.session_state.analises_realizadas),
                    "data_exportacao": datetime.now().isoformat()
                }
                
                st.download_button(
                    label="üì• Download Backup",
                    data=json.dumps(dados_exportacao, indent=2),
                    file_name=f"backup_juridico_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                    mime="application/json"
                )
        
        with col2:
            if st.button("üóëÔ∏è Limpar Hist√≥rico"):
                if st.button("‚ö†Ô∏è Confirmar Limpeza", type="secondary"):
                    st.session_state.documentos_analisados = []
                    st.session_state.minutas_geradas = []
                    st.session_state.analises_realizadas = []
                    st.success("‚úÖ Hist√≥rico limpo!")
        
        with col3:
            if st.button("üîÑ Resetar Sistema"):
                if st.button("‚ö†Ô∏è Confirmar Reset", type="secondary"):
                    # Limpar tudo
                    for key in list(st.session_state.keys()):
                        if key.startswith(('documentos_', 'minutas_', 'analises_')):
                            del st.session_state[key]
                    st.success("‚úÖ Sistema resetado!")
        
        st.divider()
        
        # Informa√ß√µes do sistema
        st.markdown("### ‚ÑπÔ∏è Informa√ß√µes do Sistema")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.info("""
            **üöÄ Jurisprud√™ncia AI Premium v2.0**
            
            **Funcionalidades:**
            ‚Ä¢ üìã An√°lise estruturada de peti√ß√µes
            ‚Ä¢ üìù Gerador autom√°tico de minutas
            ‚Ä¢ üß† An√°lise jur√≠dica avan√ßada
            ‚Ä¢ üìä Dashboard e relat√≥rios
            ‚Ä¢ ‚öñÔ∏è C√°lculo de probabilidades
            """)
        
        with col2:
            st.success("""
            **‚úÖ Vantagens sobre Concorrentes:**
            
            ‚Ä¢ üéØ An√°lise mais precisa que o Justino
            ‚Ä¢ üöÄ Interface mais moderna e intuitiva
            ‚Ä¢ üß† IA treinada especificamente para direito brasileiro
            ‚Ä¢ üìä Relat√≥rios mais detalhados
            ‚Ä¢ üí∞ Estimativas de valores real√≠sticas
            """)

def main():
    """Fun√ß√£o principal da interface premium"""
    
    # Configura√ß√£o da p√°gina
    st.set_page_config(
        page_title='üöÄ Jurisprud√™ncia AI Premium',
        page_icon='‚öñÔ∏è',
        layout='wide',
        initial_sidebar_state='collapsed'
    )
    
    # CSS personalizado
    st.markdown("""
    <style>
        .main {
            padding-top: 1rem;
        }
        
        .metric-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 15px;
            border-radius: 10px;
            color: white;
            text-align: center;
            margin: 10px 0;
        }
        
        .success-box {
            background: linear-gradient(90deg, #00d084, #00a86b);
            padding: 10px;
            border-radius: 8px;
            color: white;
            margin: 10px 0;
        }
        
        .warning-box {
            background: linear-gradient(90deg, #ffa500, #ff8c00);
            padding: 10px;
            border-radius: 8px;
            color: white;
            margin: 10px 0;
        }
        
        .info-box {
            background: linear-gradient(90deg, #4a90e2, #67b3f3);
            padding: 10px;
            border-radius: 8px;
            color: white;
            margin: 10px 0;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Inicializar interface
    interface = InterfacePremium()
    interface.render_interface_completa()

if __name__ == "__main__":
    main()