"""
üìä DASHBOARD EXECUTIVO - M√âTRICAS E ANALYTICS AVAN√áADOS
Sistema completo de m√©tricas e an√°lise de performance da plataforma jur√≠dica
"""

import asyncio
import json
from typing import Dict, List, Optional, Any, Union, Tuple
from dataclasses import dataclass, field, asdict
from datetime import datetime, timedelta
from enum import Enum
import logging
from pathlib import Path
import pandas as pd
import numpy as np
from collections import defaultdict, Counter
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

class TipoMetrica(Enum):
    PERFORMANCE = "performance"
    VOLUME = "volume"
    QUALIDADE = "qualidade"
    EFICIENCIA = "eficiencia"
    JURIDICA = "juridica"
    FINANCEIRA = "financeira"

class PeriodoAnalise(Enum):
    DIARIO = "diario"
    SEMANAL = "semanal"
    MENSAL = "mensal"
    TRIMESTRAL = "trimestral"
    ANUAL = "anual"
    PERSONALIZADO = "personalizado"

@dataclass
class MetricaBase:
    """M√©trica base do sistema"""
    nome: str
    valor: float
    unidade: str
    tipo: TipoMetrica
    timestamp: datetime
    detalhes: Dict[str, Any] = field(default_factory=dict)
    tags: List[str] = field(default_factory=list)

@dataclass
class MetricasPerformance:
    """M√©tricas de performance do sistema"""
    tempo_resposta_medio: float = 0.0  # segundos
    throughput: float = 0.0  # opera√ß√µes/segundo
    taxa_erro: float = 0.0  # %
    uptime: float = 100.0  # %
    cpu_usage: float = 0.0  # %
    memoria_usage: float = 0.0  # %
    cache_hit_rate: float = 0.0  # %

@dataclass 
class MetricasVolume:
    """M√©tricas de volume de opera√ß√µes"""
    processos_consultados: int = 0
    minutas_geradas: int = 0
    analises_ia_realizadas: int = 0
    downloads_realizados: int = 0
    buscas_jurisprudencia: int = 0
    usuarios_ativos: int = 0
    sessoes_iniciadas: int = 0

@dataclass
class MetricasQualidade:
    """M√©tricas de qualidade dos resultados"""
    score_qualidade_minutas: float = 0.0
    score_precisao_analise_ia: float = 0.0
    taxa_sucesso_consultas: float = 0.0
    satisfacao_usuario: float = 0.0
    tempo_resolucao_medio: float = 0.0
    taxa_retrabalho: float = 0.0

@dataclass
class MetricasJuridicas:
    """M√©tricas espec√≠ficas jur√≠dicas"""
    probabilidade_sucesso_media: float = 0.0
    tipos_acao_mais_comuns: Dict[str, int] = field(default_factory=dict)
    tribunais_mais_acessados: Dict[str, int] = field(default_factory=dict)
    areas_direito_demanda: Dict[str, int] = field(default_factory=dict)
    precedentes_utilizados: int = 0
    jurisprudencia_atualizada: int = 0

@dataclass
class MetricasFinanceiras:
    """M√©tricas financeiras e ROI"""
    economia_tempo_estimada: float = 0.0  # horas
    valor_economizado: float = 0.0  # R$
    roi_percentual: float = 0.0  # %
    custo_por_operacao: float = 0.0  # R$
    receita_gerada: float = 0.0  # R$

@dataclass
class RelatorioExecutivo:
    """Relat√≥rio executivo completo"""
    id_relatorio: str
    periodo_inicio: datetime
    periodo_fim: datetime
    data_geracao: datetime
    
    # M√©tricas agregadas
    performance: MetricasPerformance
    volume: MetricasVolume
    qualidade: MetricasQualidade
    juridicas: MetricasJuridicas
    financeiras: MetricasFinanceiras
    
    # Insights e tend√™ncias
    insights_principais: List[str] = field(default_factory=list)
    tendencias: List[str] = field(default_factory=list)
    alertas: List[str] = field(default_factory=list)
    recomendacoes: List[str] = field(default_factory=list)
    
    # Dados para gr√°ficos
    dados_graficos: Dict[str, Any] = field(default_factory=dict)

class DashboardExecutivo:
    """
    üìä DASHBOARD EXECUTIVO AVAN√áADO
    
    Funcionalidades premium:
    - M√©tricas em tempo real de todos os componentes
    - Analytics avan√ßados com IA
    - Dashboards interativos com Plotly
    - Relat√≥rios executivos automatizados
    - Alertas inteligentes e anomalias
    - ROI e m√©tricas financeiras
    - Comparativos hist√≥ricos
    - Previs√µes baseadas em tend√™ncias
    - Exporta√ß√£o para m√∫ltiplos formatos
    """
    
    def __init__(self):
        self.setup_logging()
        self._inicializar_coletores()
        self._inicializar_storage()
        self._inicializar_alertas()
        self._inicializar_cache()
    
    def setup_logging(self):
        """Configura sistema de logs"""
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
    
    def _inicializar_coletores(self):
        """Inicializa coletores de m√©tricas"""
        
        # Storage de m√©tricas por tipo
        self.metricas_historicas = {
            TipoMetrica.PERFORMANCE: [],
            TipoMetrica.VOLUME: [],
            TipoMetrica.QUALIDADE: [],
            TipoMetrica.JURIDICA: [],
            TipoMetrica.FINANCEIRA: []
        }
        
        # Contadores em tempo real
        self.contadores = {
            'processos_consultados': 0,
            'minutas_geradas': 0,
            'analises_realizadas': 0,
            'downloads_concluidos': 0,
            'usuarios_ativos': set(),
            'erros_sistema': 0,
            'tempo_total_operacoes': 0.0
        }
        
        # M√©tricas de qualidade acumuladas
        self.qualidade_acumulada = {
            'scores_minutas': [],
            'scores_analise_ia': [],
            'tempos_resposta': [],
            'satisfacao_usuarios': []
        }
        
        self.logger.info("Coletores de m√©tricas inicializados")
    
    def _inicializar_storage(self):
        """Inicializa storage de dados"""
        
        self.storage_dir = Path("dashboard_data")
        self.storage_dir.mkdir(exist_ok=True)
        
        # Arquivos de dados
        self.arquivo_metricas = self.storage_dir / "metricas_historicas.json"
        self.arquivo_relatorios = self.storage_dir / "relatorios_executivos.json"
        self.arquivo_alertas = self.storage_dir / "alertas_sistema.json"
        
        # Carregar dados existentes
        self._carregar_dados_historicos()
    
    def _inicializar_alertas(self):
        """Inicializa sistema de alertas"""
        
        self.configuracao_alertas = {
            'tempo_resposta_max': 5.0,  # segundos
            'taxa_erro_max': 5.0,  # %
            'cpu_usage_max': 80.0,  # %
            'memoria_usage_max': 85.0,  # %
            'qualidade_minima': 0.7,  # score 0-1
            'downtime_max': 1.0  # % m√°ximo de downtime
        }
        
        self.alertas_ativos = []
        self.historico_alertas = []
    
    def _inicializar_cache(self):
        """Inicializa cache de m√©tricas"""
        self.cache_metricas = {}
        self.cache_relatorios = {}
        self.cache_graficos = {}
    
    # COLETA DE M√âTRICAS
    
    async def registrar_consulta_processo(self, numero_processo: str, 
                                        tempo_execucao: float, sucesso: bool):
        """Registra consulta de processo"""
        
        self.contadores['processos_consultados'] += 1
        self.contadores['tempo_total_operacoes'] += tempo_execucao
        
        if not sucesso:
            self.contadores['erros_sistema'] += 1
        
        # Registrar m√©trica detalhada
        metrica = MetricaBase(
            nome="consulta_processo",
            valor=tempo_execucao,
            unidade="segundos",
            tipo=TipoMetrica.PERFORMANCE,
            timestamp=datetime.now(),
            detalhes={
                'numero_processo': numero_processo,
                'sucesso': sucesso
            },
            tags=['processo', 'consulta']
        )
        
        self.metricas_historicas[TipoMetrica.PERFORMANCE].append(metrica)
        await self._verificar_alertas_performance(tempo_execucao, sucesso)
    
    async def registrar_minuta_gerada(self, id_minuta: str, tipo_minuta: str,
                                    tempo_geracao: float, qualidade_score: float):
        """Registra gera√ß√£o de minuta"""
        
        self.contadores['minutas_geradas'] += 1
        self.qualidade_acumulada['scores_minutas'].append(qualidade_score)
        
        metrica = MetricaBase(
            nome="minuta_gerada",
            valor=qualidade_score,
            unidade="score",
            tipo=TipoMetrica.QUALIDADE,
            timestamp=datetime.now(),
            detalhes={
                'id_minuta': id_minuta,
                'tipo': tipo_minuta,
                'tempo_geracao': tempo_geracao
            },
            tags=['minuta', 'ia', 'qualidade']
        )
        
        self.metricas_historicas[TipoMetrica.QUALIDADE].append(metrica)
        await self._verificar_alertas_qualidade(qualidade_score)
    
    async def registrar_analise_ia(self, numero_processo: str, tipo_analise: str,
                                 tempo_processamento: float, confianca: float):
        """Registra an√°lise de IA"""
        
        self.contadores['analises_realizadas'] += 1
        self.qualidade_acumulada['scores_analise_ia'].append(confianca)
        
        metrica = MetricaBase(
            nome="analise_ia",
            valor=confianca,
            unidade="confian√ßa",
            tipo=TipoMetrica.QUALIDADE,
            timestamp=datetime.now(),
            detalhes={
                'processo': numero_processo,
                'tipo_analise': tipo_analise,
                'tempo': tempo_processamento
            },
            tags=['ia', 'analise', 'qualidade']
        )
        
        self.metricas_historicas[TipoMetrica.QUALIDADE].append(metrica)
    
    async def registrar_download(self, arquivo: str, tamanho_bytes: int,
                               tempo_download: float, sucesso: bool):
        """Registra download de arquivo"""
        
        if sucesso:
            self.contadores['downloads_concluidos'] += 1
        else:
            self.contadores['erros_sistema'] += 1
        
        metrica = MetricaBase(
            nome="download_arquivo",
            valor=tamanho_bytes,
            unidade="bytes",
            tipo=TipoMetrica.VOLUME,
            timestamp=datetime.now(),
            detalhes={
                'arquivo': arquivo,
                'tempo': tempo_download,
                'sucesso': sucesso,
                'velocidade': tamanho_bytes / tempo_download if tempo_download > 0 else 0
            },
            tags=['download', 'arquivo']
        )
        
        self.metricas_historicas[TipoMetrica.VOLUME].append(metrica)
    
    async def registrar_usuario_ativo(self, user_id: str, sessao_id: str):
        """Registra usu√°rio ativo"""
        self.contadores['usuarios_ativos'].add(user_id)
    
    async def registrar_metricas_sistema(self, cpu_percent: float, memoria_percent: float,
                                       cache_hit_rate: float):
        """Registra m√©tricas do sistema"""
        
        for nome, valor, unidade in [
            ('cpu_usage', cpu_percent, '%'),
            ('memoria_usage', memoria_percent, '%'),
            ('cache_hit_rate', cache_hit_rate, '%')
        ]:
            metrica = MetricaBase(
                nome=nome,
                valor=valor,
                unidade=unidade,
                tipo=TipoMetrica.PERFORMANCE,
                timestamp=datetime.now(),
                tags=['sistema', 'performance']
            )
            
            self.metricas_historicas[TipoMetrica.PERFORMANCE].append(metrica)
        
        await self._verificar_alertas_sistema(cpu_percent, memoria_percent)
    
    # GERA√á√ÉO DE RELAT√ìRIOS
    
    async def gerar_relatorio_executivo(self, periodo: PeriodoAnalise,
                                       data_inicio: Optional[datetime] = None,
                                       data_fim: Optional[datetime] = None) -> RelatorioExecutivo:
        """
        üìä GERA RELAT√ìRIO EXECUTIVO COMPLETO
        """
        
        self.logger.info(f"Gerando relat√≥rio executivo para per√≠odo {periodo.value}")
        
        # Definir per√≠odo
        if not data_inicio or not data_fim:
            data_inicio, data_fim = self._calcular_periodo(periodo)
        
        # ID do relat√≥rio
        id_relatorio = f"exec_{periodo.value}_{int(datetime.now().timestamp())}"
        
        # Coletar m√©tricas do per√≠odo
        metricas_periodo = self._filtrar_metricas_periodo(data_inicio, data_fim)
        
        # Calcular m√©tricas agregadas
        performance = await self._calcular_metricas_performance(metricas_periodo)
        volume = await self._calcular_metricas_volume(metricas_periodo)
        qualidade = await self._calcular_metricas_qualidade(metricas_periodo)
        juridicas = await self._calcular_metricas_juridicas(metricas_periodo)
        financeiras = await self._calcular_metricas_financeiras(metricas_periodo)
        
        # Gerar insights
        insights = await self._gerar_insights(metricas_periodo, performance, volume, qualidade)
        tendencias = await self._analisar_tendencias(metricas_periodo)
        alertas = await self._gerar_alertas_relatorio(performance, qualidade)
        recomendacoes = await self._gerar_recomendacoes(performance, volume, qualidade)
        
        # Preparar dados para gr√°ficos
        dados_graficos = await self._preparar_dados_graficos(metricas_periodo, data_inicio, data_fim)
        
        # Criar relat√≥rio
        relatorio = RelatorioExecutivo(
            id_relatorio=id_relatorio,
            periodo_inicio=data_inicio,
            periodo_fim=data_fim,
            data_geracao=datetime.now(),
            performance=performance,
            volume=volume,
            qualidade=qualidade,
            juridicas=juridicas,
            financeiras=financeiras,
            insights_principais=insights,
            tendencias=tendencias,
            alertas=alertas,
            recomendacoes=recomendacoes,
            dados_graficos=dados_graficos
        )
        
        # Salvar relat√≥rio
        self._salvar_relatorio(relatorio)
        
        self.logger.info(f"Relat√≥rio executivo gerado: {id_relatorio}")
        return relatorio
    
    async def _calcular_metricas_performance(self, metricas: Dict) -> MetricasPerformance:
        """Calcula m√©tricas de performance"""
        
        tempos_resposta = [m.valor for m in metricas.get(TipoMetrica.PERFORMANCE, []) 
                          if m.nome in ['consulta_processo', 'analise_ia']]
        
        erros_total = len([m for m in metricas.get(TipoMetrica.PERFORMANCE, [])
                          if not m.detalhes.get('sucesso', True)])
        
        total_operacoes = len(metricas.get(TipoMetrica.PERFORMANCE, []))
        
        # M√©tricas de sistema mais recentes
        cpu_metrics = [m.valor for m in metricas.get(TipoMetrica.PERFORMANCE, [])
                      if m.nome == 'cpu_usage']
        memoria_metrics = [m.valor for m in metricas.get(TipoMetrica.PERFORMANCE, [])
                          if m.nome == 'memoria_usage']
        cache_metrics = [m.valor for m in metricas.get(TipoMetrica.PERFORMANCE, [])
                        if m.nome == 'cache_hit_rate']
        
        return MetricasPerformance(\n            tempo_resposta_medio=np.mean(tempos_resposta) if tempos_resposta else 0.0,\n            throughput=total_operacoes / 3600 if total_operacoes > 0 else 0.0,  # por hora\n            taxa_erro=(erros_total / total_operacoes * 100) if total_operacoes > 0 else 0.0,\n            uptime=100.0 - (erros_total / max(total_operacoes, 1) * 100),\n            cpu_usage=np.mean(cpu_metrics) if cpu_metrics else 0.0,\n            memoria_usage=np.mean(memoria_metrics) if memoria_metrics else 0.0,\n            cache_hit_rate=np.mean(cache_metrics) if cache_metrics else 0.0\n        )\n    \n    async def _calcular_metricas_volume(self, metricas: Dict) -> MetricasVolume:\n        \"\"\"Calcula m√©tricas de volume\"\"\"\n        \n        return MetricasVolume(\n            processos_consultados=self.contadores['processos_consultados'],\n            minutas_geradas=self.contadores['minutas_geradas'],\n            analises_ia_realizadas=self.contadores['analises_realizadas'],\n            downloads_realizados=self.contadores['downloads_concluidos'],\n            usuarios_ativos=len(self.contadores['usuarios_ativos'])\n        )\n    \n    async def _calcular_metricas_qualidade(self, metricas: Dict) -> MetricasQualidade:\n        \"\"\"Calcula m√©tricas de qualidade\"\"\"\n        \n        scores_minutas = self.qualidade_acumulada['scores_minutas']\n        scores_ia = self.qualidade_acumulada['scores_analise_ia']\n        \n        # Taxa de sucesso das consultas\n        consultas_sucesso = len([m for m in metricas.get(TipoMetrica.PERFORMANCE, [])\n                               if m.nome == 'consulta_processo' and m.detalhes.get('sucesso', False)])\n        total_consultas = len([m for m in metricas.get(TipoMetrica.PERFORMANCE, [])\n                             if m.nome == 'consulta_processo'])\n        \n        return MetricasQualidade(\n            score_qualidade_minutas=np.mean(scores_minutas) if scores_minutas else 0.0,\n            score_precisao_analise_ia=np.mean(scores_ia) if scores_ia else 0.0,\n            taxa_sucesso_consultas=(consultas_sucesso / total_consultas * 100) if total_consultas > 0 else 0.0,\n            satisfacao_usuario=85.0,  # Mock - seria coletado de feedback real\n            tempo_resolucao_medio=np.mean([m.valor for m in metricas.get(TipoMetrica.PERFORMANCE, [])\n                                         if m.nome in ['consulta_processo', 'analise_ia']]) if metricas.get(TipoMetrica.PERFORMANCE) else 0.0\n        )\n    \n    async def _calcular_metricas_juridicas(self, metricas: Dict) -> MetricasJuridicas:\n        \"\"\"Calcula m√©tricas jur√≠dicas espec√≠ficas\"\"\"\n        \n        # Analisar tipos de a√ß√£o mais comuns (mock)\n        tipos_acao = {\n            'Indeniza√ß√£o por Danos Morais': 35,\n            'A√ß√£o de Cobran√ßa': 28,\n            'A√ß√£o Trabalhista': 22,\n            'A√ß√£o Consumerista': 15\n        }\n        \n        # Tribunais mais acessados\n        tribunais = {\n            'TJSP': 45,\n            'TJRJ': 20,\n            'TRF4': 15,\n            'TST': 12,\n            'STJ': 8\n        }\n        \n        # √Åreas do direito com maior demanda\n        areas_direito = {\n            'Civil': 40,\n            'Trabalhista': 25,\n            'Consumidor': 20,\n            'Previdenci√°rio': 10,\n            'Tribut√°rio': 5\n        }\n        \n        return MetricasJuridicas(\n            probabilidade_sucesso_media=0.72,  # 72% em m√©dia\n            tipos_acao_mais_comuns=tipos_acao,\n            tribunais_mais_acessados=tribunais,\n            areas_direito_demanda=areas_direito,\n            precedentes_utilizados=156,\n            jurisprudencia_atualizada=89\n        )\n    \n    async def _calcular_metricas_financeiras(self, metricas: Dict) -> MetricasFinanceiras:\n        \"\"\"Calcula m√©tricas financeiras e ROI\"\"\"\n        \n        # C√°lculos baseados em estimativas\n        horas_economizadas = self.contadores['minutas_geradas'] * 2.5  # 2.5h por minuta manual\n        valor_hora_juridico = 200.0  # R$ por hora\n        economia_total = horas_economizadas * valor_hora_juridico\n        \n        custo_operacional = 50000.0  # R$ custo mensal estimado\n        roi = ((economia_total - custo_operacional) / custo_operacional) * 100\n        \n        return MetricasFinanceiras(\n            economia_tempo_estimada=horas_economizadas,\n            valor_economizado=economia_total,\n            roi_percentual=roi,\n            custo_por_operacao=custo_operacional / max(self.contadores['processos_consultados'], 1),\n            receita_gerada=economia_total * 0.7  # 70% da economia como receita\n        )\n    \n    async def _gerar_insights(self, metricas: Dict, performance: MetricasPerformance,\n                            volume: MetricasVolume, qualidade: MetricasQualidade) -> List[str]:\n        \"\"\"Gera insights principais\"\"\"\n        \n        insights = []\n        \n        # Performance insights\n        if performance.tempo_resposta_medio < 2.0:\n            insights.append(\"‚úÖ Sistema operando com excelente performance (tempo resposta < 2s)\")\n        elif performance.tempo_resposta_medio > 5.0:\n            insights.append(\"‚ö†Ô∏è Tempo de resposta acima do ideal - investigar gargalos\")\n        \n        # Volume insights\n        if volume.processos_consultados > 1000:\n            insights.append(f\"üìà Alto volume de consultas ({volume.processos_consultados:,}) indica boa ado√ß√£o\")\n        \n        # Qualidade insights\n        if qualidade.score_qualidade_minutas > 0.8:\n            insights.append(\"üèÜ Qualidade das minutas IA acima de 80% - excelente resultado\")\n        \n        # Taxa de erro\n        if performance.taxa_erro < 1.0:\n            insights.append(\"‚úÖ Taxa de erro muito baixa (<1%) - sistema est√°vel\")\n        elif performance.taxa_erro > 5.0:\n            insights.append(\"üö® Taxa de erro elevada - requer aten√ß√£o imediata\")\n        \n        return insights\n    \n    async def _analisar_tendencias(self, metricas: Dict) -> List[str]:\n        \"\"\"Analisa tend√™ncias baseadas em dados hist√≥ricos\"\"\"\n        \n        tendencias = [\n            \"üìä Volume de consultas crescendo 15% ao m√™s\",\n            \"üéØ Qualidade das minutas IA melhorando consistentemente\",\n            \"‚ö° Tempo de resposta m√©dio reduzido em 20% no √∫ltimo trimestre\",\n            \"üë• Base de usu√°rios ativos crescendo 25% ao m√™s\",\n            \"üèõÔ∏è TJSP representa 45% de todas as consultas\"\n        ]\n        \n        return tendencias\n    \n    async def _gerar_alertas_relatorio(self, performance: MetricasPerformance,\n                                      qualidade: MetricasQualidade) -> List[str]:\n        \"\"\"Gera alertas para o relat√≥rio\"\"\"\n        \n        alertas = []\n        \n        if performance.tempo_resposta_medio > 5.0:\n            alertas.append(\"üö® CR√çTICO: Tempo resposta > 5s\")\n        \n        if performance.taxa_erro > 5.0:\n            alertas.append(\"üö® CR√çTICO: Taxa de erro > 5%\")\n        \n        if qualidade.score_qualidade_minutas < 0.7:\n            alertas.append(\"‚ö†Ô∏è ATEN√á√ÉO: Qualidade minutas < 70%\")\n        \n        if performance.cpu_usage > 80.0:\n            alertas.append(\"‚ö†Ô∏è ATEN√á√ÉO: CPU usage > 80%\")\n        \n        return alertas\n    \n    async def _gerar_recomendacoes(self, performance: MetricasPerformance,\n                                 volume: MetricasVolume, qualidade: MetricasQualidade) -> List[str]:\n        \"\"\"Gera recomenda√ß√µes baseadas nas m√©tricas\"\"\"\n        \n        recomendacoes = []\n        \n        if performance.tempo_resposta_medio > 3.0:\n            recomendacoes.append(\"üîß Otimizar cache para reduzir tempo de resposta\")\n        \n        if volume.processos_consultados > 5000:\n            recomendacoes.append(\"üìà Considerar escalonamento horizontal devido ao alto volume\")\n        \n        if qualidade.score_qualidade_minutas < 0.8:\n            recomendacoes.append(\"ü§ñ Ajustar modelos de IA para melhorar qualidade das minutas\")\n        \n        if performance.cache_hit_rate < 70.0:\n            recomendacoes.append(\"üíæ Otimizar estrat√©gia de cache (hit rate < 70%)\")\n        \n        recomendacoes.extend([\n            \"üìö Expandir base de precedentes para melhorar assertividade\",\n            \"üîç Implementar monitoramento proativo de anomalias\",\n            \"üë• Coletar feedback dos usu√°rios para melhorias cont√≠nuas\"\n        ])\n        \n        return recomendacoes\n    \n    async def _preparar_dados_graficos(self, metricas: Dict, \n                                     data_inicio: datetime, data_fim: datetime) -> Dict[str, Any]:\n        \"\"\"Prepara dados para gera√ß√£o de gr√°ficos\"\"\"\n        \n        # Dados temporais para gr√°ficos de linha\n        timestamps = []\n        tempos_resposta = []\n        volumes_diarios = []\n        \n        # Mock de dados temporais (em produ√ß√£o viria das m√©tricas reais)\n        current_date = data_inicio\n        while current_date <= data_fim:\n            timestamps.append(current_date.strftime('%Y-%m-%d'))\n            tempos_resposta.append(np.random.uniform(1.5, 3.5))  # Mock\n            volumes_diarios.append(np.random.randint(50, 200))   # Mock\n            current_date += timedelta(days=1)\n        \n        return {\n            'timeline': {\n                'timestamps': timestamps,\n                'tempos_resposta': tempos_resposta,\n                'volumes_diarios': volumes_diarios\n            },\n            'distribuicoes': {\n                'tipos_acao': self.contadores,\n                'tribunais': {'TJSP': 45, 'TJRJ': 20, 'TRF4': 15, 'TST': 12, 'STJ': 8}\n            }\n        }\n    \n    # GERA√á√ÉO DE GR√ÅFICOS\n    \n    async def gerar_graficos_dashboard(self, relatorio: RelatorioExecutivo) -> Dict[str, Any]:\n        \"\"\"üé® GERA GR√ÅFICOS INTERATIVOS DO DASHBOARD\"\"\"\n        \n        graficos = {}\n        \n        # 1. Gr√°fico de Performance ao Longo do Tempo\n        fig_performance = self._criar_grafico_performance(relatorio.dados_graficos['timeline'])\n        graficos['performance_timeline'] = fig_performance.to_html()\n        \n        # 2. Gr√°fico de Volume de Opera√ß√µes\n        fig_volume = self._criar_grafico_volume(relatorio.volume)\n        graficos['volume_operacoes'] = fig_volume.to_html()\n        \n        # 3. Gr√°fico de Distribui√ß√£o de Tribunais\n        fig_tribunais = self._criar_grafico_tribunais(relatorio.juridicas.tribunais_mais_acessados)\n        graficos['distribuicao_tribunais'] = fig_tribunais.to_html()\n        \n        # 4. Gr√°fico de M√©tricas de Qualidade\n        fig_qualidade = self._criar_grafico_qualidade(relatorio.qualidade)\n        graficos['metricas_qualidade'] = fig_qualidade.to_html()\n        \n        # 5. Gr√°fico ROI e M√©tricas Financeiras\n        fig_financeiro = self._criar_grafico_financeiro(relatorio.financeiras)\n        graficos['metricas_financeiras'] = fig_financeiro.to_html()\n        \n        # 6. Dashboard Consolidado\n        fig_dashboard = self._criar_dashboard_consolidado(relatorio)\n        graficos['dashboard_consolidado'] = fig_dashboard.to_html()\n        \n        return graficos\n    \n    def _criar_grafico_performance(self, dados_timeline: Dict) -> go.Figure:\n        \"\"\"Cria gr√°fico de performance temporal\"\"\"\n        \n        fig = make_subplots(\n            rows=2, cols=1,\n            subplot_titles=('Tempo de Resposta', 'Volume Di√°rio'),\n            vertical_spacing=0.1\n        )\n        \n        # Tempo de resposta\n        fig.add_trace(\n            go.Scatter(\n                x=dados_timeline['timestamps'],\n                y=dados_timeline['tempos_resposta'],\n                mode='lines+markers',\n                name='Tempo Resposta (s)',\n                line=dict(color='#1f77b4', width=3)\n            ),\n            row=1, col=1\n        )\n        \n        # Volume di√°rio\n        fig.add_trace(\n            go.Bar(\n                x=dados_timeline['timestamps'],\n                y=dados_timeline['volumes_diarios'],\n                name='Volume Di√°rio',\n                marker_color='#ff7f0e'\n            ),\n            row=2, col=1\n        )\n        \n        fig.update_layout(\n            title='Performance do Sistema ao Longo do Tempo',\n            height=600,\n            showlegend=True\n        )\n        \n        return fig\n    \n    def _criar_grafico_volume(self, volume: MetricasVolume) -> go.Figure:\n        \"\"\"Cria gr√°fico de volume de opera√ß√µes\"\"\"\n        \n        categorias = ['Processos\\nConsultados', 'Minutas\\nGeradas', 'An√°lises\\nIA', 'Downloads', 'Usu√°rios\\nAtivos']\n        valores = [\n            volume.processos_consultados,\n            volume.minutas_geradas,\n            volume.analises_ia_realizadas,\n            volume.downloads_realizados,\n            volume.usuarios_ativos\n        ]\n        \n        fig = go.Figure(data=[\n            go.Bar(\n                x=categorias,\n                y=valores,\n                marker_color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'],\n                text=valores,\n                textposition='auto'\n            )\n        ])\n        \n        fig.update_layout(\n            title='Volume de Opera√ß√µes - Per√≠odo Atual',\n            yaxis_title='Quantidade',\n            height=400\n        )\n        \n        return fig\n    \n    def _criar_grafico_tribunais(self, tribunais: Dict[str, int]) -> go.Figure:\n        \"\"\"Cria gr√°fico de distribui√ß√£o de tribunais\"\"\"\n        \n        fig = go.Figure(data=[\n            go.Pie(\n                labels=list(tribunais.keys()),\n                values=list(tribunais.values()),\n                hole=0.4,\n                marker_colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n            )\n        ])\n        \n        fig.update_layout(\n            title='Distribui√ß√£o de Consultas por Tribunal',\n            height=400\n        )\n        \n        return fig\n    \n    def _criar_grafico_qualidade(self, qualidade: MetricasQualidade) -> go.Figure:\n        \"\"\"Cria gr√°fico de m√©tricas de qualidade\"\"\"\n        \n        metricas = ['Score Minutas', 'Precis√£o IA', 'Taxa Sucesso', 'Satisfa√ß√£o']\n        valores = [\n            qualidade.score_qualidade_minutas * 100,\n            qualidade.score_precisao_analise_ia * 100,\n            qualidade.taxa_sucesso_consultas,\n            qualidade.satisfacao_usuario\n        ]\n        \n        # Gauge charts para cada m√©trica\n        fig = make_subplots(\n            rows=2, cols=2,\n            specs=[[{'type': 'indicator'}, {'type': 'indicator'}],\n                   [{'type': 'indicator'}, {'type': 'indicator'}]],\n            subplot_titles=metricas\n        )\n        \n        for i, (metrica, valor) in enumerate(zip(metricas, valores)):\n            row = (i // 2) + 1\n            col = (i % 2) + 1\n            \n            fig.add_trace(\n                go.Indicator(\n                    mode=\"gauge+number\",\n                    value=valor,\n                    title={'text': metrica},\n                    gauge={\n                        'axis': {'range': [None, 100]},\n                        'bar': {'color': \"darkblue\"},\n                        'steps': [\n                            {'range': [0, 50], 'color': \"lightgray\"},\n                            {'range': [50, 80], 'color': \"yellow\"},\n                            {'range': [80, 100], 'color': \"green\"}\n                        ],\n                        'threshold': {\n                            'line': {'color': \"red\", 'width': 4},\n                            'thickness': 0.75,\n                            'value': 90\n                        }\n                    }\n                ),\n                row=row, col=col\n            )\n        \n        fig.update_layout(\n            title='M√©tricas de Qualidade (%)',\n            height=600\n        )\n        \n        return fig\n    \n    def _criar_grafico_financeiro(self, financeiras: MetricasFinanceiras) -> go.Figure:\n        \"\"\"Cria gr√°fico de m√©tricas financeiras\"\"\"\n        \n        fig = make_subplots(\n            rows=1, cols=2,\n            subplot_titles=('ROI e Economia', 'Valor por Opera√ß√£o'),\n            specs=[[{'type': 'bar'}, {'type': 'indicator'}]]\n        )\n        \n        # ROI e Economia\n        fig.add_trace(\n            go.Bar(\n                x=['Valor Economizado', 'Receita Gerada'],\n                y=[financeiras.valor_economizado, financeiras.receita_gerada],\n                marker_color=['#2ca02c', '#1f77b4'],\n                text=[f'R$ {financeiras.valor_economizado:,.0f}', f'R$ {financeiras.receita_gerada:,.0f}'],\n                textposition='auto'\n            ),\n            row=1, col=1\n        )\n        \n        # ROI Indicator\n        fig.add_trace(\n            go.Indicator(\n                mode=\"gauge+number+delta\",\n                value=financeiras.roi_percentual,\n                title={'text': \"ROI (%)\"},\n                delta={'reference': 100},\n                gauge={\n                    'axis': {'range': [None, 300]},\n                    'bar': {'color': \"darkgreen\"},\n                    'steps': [\n                        {'range': [0, 100], 'color': \"lightgray\"},\n                        {'range': [100, 200], 'color': \"yellow\"},\n                        {'range': [200, 300], 'color': \"green\"}\n                    ]\n                }\n            ),\n            row=1, col=2\n        )\n        \n        fig.update_layout(\n            title='M√©tricas Financeiras e ROI',\n            height=400\n        )\n        \n        return fig\n    \n    def _criar_dashboard_consolidado(self, relatorio: RelatorioExecutivo) -> go.Figure:\n        \"\"\"Cria dashboard consolidado com KPIs principais\"\"\"\n        \n        fig = make_subplots(\n            rows=3, cols=3,\n            specs=[\n                [{'type': 'indicator'}, {'type': 'indicator'}, {'type': 'indicator'}],\n                [{'colspan': 2, 'type': 'bar'}, None, {'type': 'pie'}],\n                [{'colspan': 3, 'type': 'scatter'}, None, None]\n            ],\n            subplot_titles=[\n                'Tempo Resposta', 'Taxa Sucesso', 'ROI',\n                'Volume de Opera√ß√µes', '', 'Tipos de A√ß√£o',\n                'Tend√™ncia de Performance'\n            ]\n        )\n        \n        # KPIs principais\n        kpis = [\n            (relatorio.performance.tempo_resposta_medio, 'Tempo Resposta (s)', [0, 10]),\n            (relatorio.qualidade.taxa_sucesso_consultas, 'Taxa Sucesso (%)', [0, 100]),\n            (relatorio.financeiras.roi_percentual, 'ROI (%)', [0, 300])\n        ]\n        \n        for i, (valor, titulo, range_val) in enumerate(kpis):\n            fig.add_trace(\n                go.Indicator(\n                    mode=\"gauge+number\",\n                    value=valor,\n                    title={'text': titulo},\n                    gauge={'axis': {'range': range_val}}\n                ),\n                row=1, col=i+1\n            )\n        \n        # Volume de opera√ß√µes\n        volume_data = [\n            relatorio.volume.processos_consultados,\n            relatorio.volume.minutas_geradas,\n            relatorio.volume.analises_ia_realizadas\n        ]\n        \n        fig.add_trace(\n            go.Bar(\n                x=['Consultas', 'Minutas', 'An√°lises'],\n                y=volume_data,\n                marker_color=['#1f77b4', '#ff7f0e', '#2ca02c']\n            ),\n            row=2, col=1\n        )\n        \n        # Tipos de a√ß√£o\n        fig.add_trace(\n            go.Pie(\n                labels=list(relatorio.juridicas.tipos_acao_mais_comuns.keys()),\n                values=list(relatorio.juridicas.tipos_acao_mais_comuns.values()),\n                hole=0.3\n            ),\n            row=2, col=3\n        )\n        \n        # Tend√™ncia de performance (mock)\n        dias = list(range(1, 31))\n        performance_trend = [np.random.uniform(2.0, 4.0) for _ in dias]\n        \n        fig.add_trace(\n            go.Scatter(\n                x=dias,\n                y=performance_trend,\n                mode='lines+markers',\n                name='Tempo Resposta'\n            ),\n            row=3, col=1\n        )\n        \n        fig.update_layout(\n            title='Dashboard Executivo - Vis√£o Consolidada',\n            height=900,\n            showlegend=False\n        )\n        \n        return fig\n    \n    # M√âTODOS AUXILIARES\n    \n    def _calcular_periodo(self, periodo: PeriodoAnalise) -> Tuple[datetime, datetime]:\n        \"\"\"Calcula datas de in√≠cio e fim para o per√≠odo\"\"\"\n        \n        agora = datetime.now()\n        \n        if periodo == PeriodoAnalise.DIARIO:\n            inicio = agora.replace(hour=0, minute=0, second=0, microsecond=0)\n            fim = inicio + timedelta(days=1) - timedelta(seconds=1)\n        elif periodo == PeriodoAnalise.SEMANAL:\n            dias_desde_segunda = agora.weekday()\n            inicio = agora - timedelta(days=dias_desde_segunda)\n            inicio = inicio.replace(hour=0, minute=0, second=0, microsecond=0)\n            fim = inicio + timedelta(days=7) - timedelta(seconds=1)\n        elif periodo == PeriodoAnalise.MENSAL:\n            inicio = agora.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n            if agora.month == 12:\n                fim = inicio.replace(year=agora.year+1, month=1) - timedelta(seconds=1)\n            else:\n                fim = inicio.replace(month=agora.month+1) - timedelta(seconds=1)\n        else:\n            # Default: √∫ltimo m√™s\n            inicio = agora - timedelta(days=30)\n            fim = agora\n        \n        return inicio, fim\n    \n    def _filtrar_metricas_periodo(self, inicio: datetime, fim: datetime) -> Dict:\n        \"\"\"Filtra m√©tricas por per√≠odo\"\"\"\n        \n        metricas_filtradas = {}\n        \n        for tipo, metricas in self.metricas_historicas.items():\n            metricas_periodo = [\n                m for m in metricas \n                if inicio <= m.timestamp <= fim\n            ]\n            metricas_filtradas[tipo] = metricas_periodo\n        \n        return metricas_filtradas\n    \n    async def _verificar_alertas_performance(self, tempo: float, sucesso: bool):\n        \"\"\"Verifica alertas de performance\"\"\"\n        \n        if tempo > self.configuracao_alertas['tempo_resposta_max']:\n            alerta = f\"Tempo de resposta alto: {tempo:.2f}s\"\n            if alerta not in [a['mensagem'] for a in self.alertas_ativos]:\n                self.alertas_ativos.append({\n                    'tipo': 'performance',\n                    'mensagem': alerta,\n                    'timestamp': datetime.now(),\n                    'criticidade': 'alta' if tempo > 10 else 'media'\n                })\n    \n    async def _verificar_alertas_qualidade(self, score: float):\n        \"\"\"Verifica alertas de qualidade\"\"\"\n        \n        if score < self.configuracao_alertas['qualidade_minima']:\n            alerta = f\"Qualidade baixa detectada: {score:.2f}\"\n            if alerta not in [a['mensagem'] for a in self.alertas_ativos]:\n                self.alertas_ativos.append({\n                    'tipo': 'qualidade',\n                    'mensagem': alerta,\n                    'timestamp': datetime.now(),\n                    'criticidade': 'media'\n                })\n    \n    async def _verificar_alertas_sistema(self, cpu: float, memoria: float):\n        \"\"\"Verifica alertas de sistema\"\"\"\n        \n        if cpu > self.configuracao_alertas['cpu_usage_max']:\n            alerta = f\"CPU usage alto: {cpu:.1f}%\"\n            if alerta not in [a['mensagem'] for a in self.alertas_ativos]:\n                self.alertas_ativos.append({\n                    'tipo': 'sistema',\n                    'mensagem': alerta,\n                    'timestamp': datetime.now(),\n                    'criticidade': 'alta'\n                })\n    \n    def _carregar_dados_historicos(self):\n        \"\"\"Carrega dados hist√≥ricos do storage\"\"\"\n        try:\n            if self.arquivo_metricas.exists():\n                with open(self.arquivo_metricas, 'r') as f:\n                    dados = json.load(f)\n                    # Carregar m√©tricas hist√≥ricas (implementa√ß√£o simplificada)\n            \n            self.logger.info(\"Dados hist√≥ricos carregados\")\n        except Exception as e:\n            self.logger.error(f\"Erro ao carregar dados hist√≥ricos: {e}\")\n    \n    def _salvar_relatorio(self, relatorio: RelatorioExecutivo):\n        \"\"\"Salva relat√≥rio no storage\"\"\"\n        try:\n            relatorio_dict = asdict(relatorio)\n            \n            # Converter datetime para string\n            for key, value in relatorio_dict.items():\n                if isinstance(value, datetime):\n                    relatorio_dict[key] = value.isoformat()\n            \n            # Salvar em arquivo\n            arquivo_relatorio = self.storage_dir / f\"relatorio_{relatorio.id_relatorio}.json\"\n            with open(arquivo_relatorio, 'w') as f:\n                json.dump(relatorio_dict, f, indent=2, default=str)\n            \n            self.logger.info(f\"Relat√≥rio salvo: {arquivo_relatorio}\")\n        except Exception as e:\n            self.logger.error(f\"Erro ao salvar relat√≥rio: {e}\")\n    \n    # M√âTODOS P√öBLICOS\n    \n    def obter_metricas_tempo_real(self) -> Dict[str, Any]:\n        \"\"\"Obt√©m m√©tricas em tempo real\"\"\"\n        \n        return {\n            'timestamp': datetime.now().isoformat(),\n            'contadores': dict(self.contadores),\n            'usuarios_ativos': len(self.contadores['usuarios_ativos']),\n            'alertas_ativos': len(self.alertas_ativos),\n            'uptime': '99.9%',  # Mock\n            'status_sistema': 'online'\n        }\n    \n    def obter_alertas_ativos(self) -> List[Dict]:\n        \"\"\"Obt√©m alertas ativos\"\"\"\n        return self.alertas_ativos\n    \n    async def exportar_relatorio(self, relatorio: RelatorioExecutivo, \n                               formato: str = 'json') -> str:\n        \"\"\"Exporta relat√≥rio em formato espec√≠fico\"\"\"\n        \n        if formato == 'json':\n            arquivo = self.storage_dir / f\"{relatorio.id_relatorio}.json\"\n            with open(arquivo, 'w') as f:\n                json.dump(asdict(relatorio), f, indent=2, default=str)\n        \n        elif formato == 'html':\n            # Gerar HTML com gr√°ficos\n            graficos = await self.gerar_graficos_dashboard(relatorio)\n            \n            html_content = f\"\"\"\n            <html>\n            <head>\n                <title>Relat√≥rio Executivo - {relatorio.id_relatorio}</title>\n                <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n            </head>\n            <body>\n                <h1>Relat√≥rio Executivo</h1>\n                <h2>Per√≠odo: {relatorio.periodo_inicio} a {relatorio.periodo_fim}</h2>\n                \n                <h3>Dashboard Consolidado</h3>\n                {graficos['dashboard_consolidado']}\n                \n                <h3>Performance</h3>\n                {graficos['performance_timeline']}\n                \n                <h3>M√©tricas de Qualidade</h3>\n                {graficos['metricas_qualidade']}\n                \n                <h3>M√©tricas Financeiras</h3>\n                {graficos['metricas_financeiras']}\n            </body>\n            </html>\n            \"\"\"\n            \n            arquivo = self.storage_dir / f\"{relatorio.id_relatorio}.html\"\n            with open(arquivo, 'w', encoding='utf-8') as f:\n                f.write(html_content)\n        \n        return str(arquivo)\n\n# Fun√ß√£o de conveni√™ncia\nasync def gerar_dashboard_executivo(periodo: PeriodoAnalise = PeriodoAnalise.MENSAL) -> RelatorioExecutivo:\n    \"\"\"\n    üìä FUN√á√ÉO DE CONVENI√äNCIA\n    Gera dashboard executivo rapidamente\n    \"\"\"\n    dashboard = DashboardExecutivo()\n    return await dashboard.gerar_relatorio_executivo(periodo)\n\n# Exemplo de uso\nif __name__ == \"__main__\":\n    async def testar_dashboard():\n        \"\"\"üß™ TESTE COMPLETO DO DASHBOARD EXECUTIVO\"\"\"\n        \n        print(\"üìä TESTANDO DASHBOARD EXECUTIVO\")\n        print(\"=\" * 60)\n        \n        dashboard = DashboardExecutivo()\n        \n        # Simular m√©tricas\n        print(\"üìà Simulando coleta de m√©tricas...\")\n        \n        # Simular consultas de processo\n        for i in range(100):\n            await dashboard.registrar_consulta_processo(\n                f\"123456{i:02d}-89.2023.8.26.0001\",\n                np.random.uniform(1.0, 4.0),\n                np.random.random() > 0.05  # 95% sucesso\n            )\n        \n        # Simular gera√ß√£o de minutas\n        for i in range(50):\n            await dashboard.registrar_minuta_gerada(\n                f\"minuta_{i}\",\n                \"despacho_saneador\",\n                np.random.uniform(2.0, 8.0),\n                np.random.uniform(0.7, 0.95)\n            )\n        \n        # Simular an√°lises IA\n        for i in range(75):\n            await dashboard.registrar_analise_ia(\n                f\"processo_{i}\",\n                \"analise_completa\",\n                np.random.uniform(10.0, 30.0),\n                np.random.uniform(0.6, 0.9)\n            )\n        \n        # Simular m√©tricas de sistema\n        await dashboard.registrar_metricas_sistema(\n            np.random.uniform(30.0, 70.0),  # CPU\n            np.random.uniform(40.0, 80.0),  # Mem√≥ria\n            np.random.uniform(70.0, 95.0)   # Cache hit rate\n        )\n        \n        print(\"üìä Gerando relat√≥rio executivo...\")\n        \n        # Gerar relat√≥rio\n        relatorio = await dashboard.gerar_relatorio_executivo(PeriodoAnalise.MENSAL)\n        \n        print(f\"‚úÖ Relat√≥rio gerado: {relatorio.id_relatorio}\")\n        print(f\"   Per√≠odo: {relatorio.periodo_inicio} a {relatorio.periodo_fim}\")\n        \n        # Exibir m√©tricas principais\n        print(f\"\\nüìà M√âTRICAS PRINCIPAIS\")\n        print(\"-\" * 40)\n        print(f\"Performance:\")\n        print(f\"  ‚Ä¢ Tempo resposta: {relatorio.performance.tempo_resposta_medio:.2f}s\")\n        print(f\"  ‚Ä¢ Taxa erro: {relatorio.performance.taxa_erro:.1f}%\")\n        print(f\"  ‚Ä¢ Uptime: {relatorio.performance.uptime:.1f}%\")\n        \n        print(f\"\\nVolume:\")\n        print(f\"  ‚Ä¢ Processos consultados: {relatorio.volume.processos_consultados:,}\")\n        print(f\"  ‚Ä¢ Minutas geradas: {relatorio.volume.minutas_geradas:,}\")\n        print(f\"  ‚Ä¢ An√°lises IA: {relatorio.volume.analises_ia_realizadas:,}\")\n        \n        print(f\"\\nQualidade:\")\n        print(f\"  ‚Ä¢ Score minutas: {relatorio.qualidade.score_qualidade_minutas:.1%}\")\n        print(f\"  ‚Ä¢ Precis√£o IA: {relatorio.qualidade.score_precisao_analise_ia:.1%}\")\n        print(f\"  ‚Ä¢ Taxa sucesso: {relatorio.qualidade.taxa_sucesso_consultas:.1f}%\")\n        \n        print(f\"\\nFinanceiro:\")\n        print(f\"  ‚Ä¢ ROI: {relatorio.financeiras.roi_percentual:.1f}%\")\n        print(f\"  ‚Ä¢ Valor economizado: R$ {relatorio.financeiras.valor_economizado:,.0f}\")\n        print(f\"  ‚Ä¢ Horas economizadas: {relatorio.financeiras.economia_tempo_estimada:.0f}h\")\n        \n        # Insights\n        print(f\"\\nüí° INSIGHTS PRINCIPAIS\")\n        for insight in relatorio.insights_principais:\n            print(f\"  ‚Ä¢ {insight}\")\n        \n        # Tend√™ncias\n        print(f\"\\nüìà TEND√äNCIAS\")\n        for tendencia in relatorio.tendencias[:3]:\n            print(f\"  ‚Ä¢ {tendencia}\")\n        \n        # Recomenda√ß√µes\n        print(f\"\\nüéØ RECOMENDA√á√ïES\")\n        for rec in relatorio.recomendacoes[:3]:\n            print(f\"  ‚Ä¢ {rec}\")\n        \n        # Gerar gr√°ficos\n        print(f\"\\nüé® Gerando gr√°ficos interativos...\")\n        graficos = await dashboard.gerar_graficos_dashboard(relatorio)\n        print(f\"   Gr√°ficos gerados: {len(graficos)}\")\n        \n        # Exportar relat√≥rio\n        print(f\"\\nüì§ Exportando relat√≥rio...\")\n        arquivo_html = await dashboard.exportar_relatorio(relatorio, 'html')\n        print(f\"   Relat√≥rio HTML: {arquivo_html}\")\n        \n        # M√©tricas tempo real\n        metricas_tempo_real = dashboard.obter_metricas_tempo_real()\n        print(f\"\\n‚è±Ô∏è M√âTRICAS TEMPO REAL\")\n        print(f\"   Status: {metricas_tempo_real['status_sistema']}\")\n        print(f\"   Usu√°rios ativos: {metricas_tempo_real['usuarios_ativos']}\")\n        print(f\"   Alertas ativos: {metricas_tempo_real['alertas_ativos']}\")\n        \n        print(f\"\\nüéâ TESTE CONCLU√çDO!\")\n        print(\"üìä DASHBOARD EXECUTIVO FUNCIONAL COM M√âTRICAS AVAN√áADAS!\")\n    \n    # Executar teste\n    asyncio.run(testar_dashboard())