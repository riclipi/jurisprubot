"""
üéØ ANALISADOR JUR√çDICO AVAN√áADO
Sistema que supera plataformas concorrentes em an√°lise processual
"""

import re
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
import json
from pathlib import Path

class RiscoProcessual(Enum):
    BAIXO = "baixo"
    MEDIO = "medio" 
    ALTO = "alto"
    CRITICO = "critico"

class TipoRecomendacao(Enum):
    PROCESSUAL = "processual"
    SUBSTANTIVA = "substantiva"
    ESTRATEGICA = "estrategica"
    PROBATORIA = "probatoria"
    CAUTELAR = "cautelar"

@dataclass
class RequisitoLegal:
    """Requisito legal espec√≠fico"""
    nome: str
    descricao: str
    obrigatorio: bool
    categoria: str  # "processual", "substantivo", "probatorio"
    atendido: bool = False
    evidencias: List[str] = field(default_factory=list)
    observacoes: str = ""

@dataclass
class AnaliseProbabilidade:
    """An√°lise de probabilidade de sucesso"""
    exito_total: float  # 0-1
    exito_parcial: float  # 0-1
    risco_improcedencia: float  # 0-1
    fatores_positivos: List[str] = field(default_factory=list)
    fatores_negativos: List[str] = field(default_factory=list)
    precedentes_favoraveis: List[str] = field(default_factory=list)
    precedentes_contrarios: List[str] = field(default_factory=list)

@dataclass
class RecomendacaoEstrategica:
    """Recomenda√ß√£o estrat√©gica"""
    tipo: TipoRecomendacao
    prioridade: str  # "alta", "media", "baixa"
    titulo: str
    descricao: str
    prazo_sugerido: Optional[str] = None
    custo_estimado: Optional[str] = None
    impacto_probabilidade: float = 0.0  # -1 a +1
    fundamentacao: List[str] = field(default_factory=list)

@dataclass
class AnaliseEstrategica:
    """An√°lise estrat√©gica do processo"""
    valor_estimado_condenacao: Optional[str]
    tempo_estimado_processo: str
    custas_estimadas: str
    probabilidade_sucesso: AnaliseProbabilidade
    estrategias_recomendadas: List[str]
    riscos_identificados: List[str]
    oportunidades: List[str]
    
@dataclass
class AnaliseJuridicaCompleta:
    """An√°lise jur√≠dica completa do caso"""
    id_analise: str
    data_analise: datetime
    tipo_acao: str
    resumo_executivo: str
    
    # An√°lise de requisitos
    requisitos_legais: List[RequisitoLegal]
    percentual_atendimento: float
    
    # An√°lise de m√©rito
    analise_probabilidade: AnaliseProbabilidade
    
    # Recomenda√ß√µes
    recomendacoes: List[RecomendacaoEstrategica]
    
    # An√°lise estrat√©gica
    analise_estrategica: AnaliseEstrategica
    
    # Risco geral
    nivel_risco: RiscoProcessual
    score_geral: float  # 0-10

class AnalisadorJuridico:
    """
    üöÄ ANALISADOR JUR√çDICO PREMIUM
    Funcionalidades que superam o Justino C√≠vel
    """
    
    def __init__(self):
        self._carregar_base_conhecimento()
        self._inicializar_criterios_analise()
    
    def _carregar_base_conhecimento(self):
        """Carrega base de conhecimento jur√≠dico"""
        
        self.requisitos_por_acao = {
            "indeniza√ß√£o por danos morais": [
                RequisitoLegal("conduta_ilicita", "Comprova√ß√£o de conduta il√≠cita", True, "substantivo"),
                RequisitoLegal("dano_moral", "Demonstra√ß√£o do dano moral", True, "substantivo"),
                RequisitoLegal("nexo_causal", "Nexo causal entre conduta e dano", True, "substantivo"),
                RequisitoLegal("documentos_probatorios", "Documentos que comprovem o alegado", True, "probatorio"),
                RequisitoLegal("qualificacao_partes", "Qualifica√ß√£o completa das partes", True, "processual"),
                RequisitoLegal("valor_indenizacao", "Valor da indeniza√ß√£o fundamentado", False, "substantivo"),
                RequisitoLegal("precedentes_similares", "Cita√ß√£o de precedentes similares", False, "substantivo")
            ],
            
            "a√ß√£o de cobran√ßa": [
                RequisitoLegal("titulo_executivo", "T√≠tulo executivo ou documento da d√≠vida", True, "substantivo"),
                RequisitoLegal("valor_atualizado", "C√°lculo atualizado do d√©bito", True, "substantivo"),
                RequisitoLegal("vencimento_obrigacao", "Prova do vencimento da obriga√ß√£o", True, "substantivo"),
                RequisitoLegal("notificacao_devedor", "Constitui√ß√£o em mora do devedor", False, "processual"),
                RequisitoLegal("juros_corre√ß√£o", "Especifica√ß√£o de juros e corre√ß√£o", False, "substantivo")
            ],
            
            "revis√£o contrato banc√°rio": [
                RequisitoLegal("contrato_original", "Contrato banc√°rio original", True, "probatorio"),
                RequisitoLegal("planilha_pagamentos", "Planilha de pagamentos realizados", True, "probatorio"),
                RequisitoLegal("calculo_revisional", "C√°lculo revisional detalhado", True, "substantivo"),
                RequisitoLegal("clausulas_abusivas", "Identifica√ß√£o de cl√°usulas abusivas", True, "substantivo"),
                RequisitoLegal("pedido_especifico", "Pedido espec√≠fico de revis√£o", True, "processual"),
                RequisitoLegal("pericia_contabil", "Necessidade de per√≠cia cont√°bil", False, "probatorio")
            ],
            
            "a√ß√£o consignat√≥ria": [
                RequisitoLegal("duvida_fundamentada", "D√∫vida ou recusa fundamentada", True, "substantivo"),
                RequisitoLegal("deposito_inicial", "Dep√≥sito do valor devido", True, "processual"),
                RequisitoLegal("tentativa_pagamento", "Prova da tentativa de pagamento", True, "probatorio"),
                RequisitoLegal("valor_correto", "Valor correto da obriga√ß√£o", True, "substantivo")
            ]
        }
        
        self.probabilidades_sucesso = {
            "indeniza√ß√£o por danos morais": {
                "base": 0.65,
                "fatores_positivos": {
                    "negativacao_indevida": 0.15,
                    "protesto_indevido": 0.20,
                    "erro_banco_dados": 0.10,
                    "precedentes_favoraveis": 0.10,
                    "valor_moderado": 0.05
                },
                "fatores_negativos": {
                    "negativacao_anterior": -0.25,
                    "debito_existente": -0.15,
                    "valor_excessivo": -0.10,
                    "falta_provas": -0.20
                }
            },
            
            "a√ß√£o de cobran√ßa": {
                "base": 0.70,
                "fatores_positivos": {
                    "titulo_executivo": 0.20,
                    "documento_original": 0.10,
                    "calculo_correto": 0.05
                },
                "fatores_negativos": {
                    "prescricao": -0.30,
                    "documento_irregular": -0.25,
                    "valor_incorreto": -0.15
                }
            },
            
            "revis√£o contrato banc√°rio": {
                "base": 0.45,
                "fatores_positivos": {
                    "juros_abusivos": 0.20,
                    "capitalizacao_ilegal": 0.15,
                    "spread_excessivo": 0.10,
                    "pericia_favoravel": 0.15
                },
                "fatores_negativos": {
                    "contrato_claro": -0.15,
                    "juros_mercado": -0.10,
                    "quitacao_posterior": -0.20
                }
            }
        }
        
        self.custos_estimados = {
            "a√ß√£o de cobran√ßa": {"custas": "2% valor", "honorarios": "10-20%", "tempo": "12-18 meses"},
            "indeniza√ß√£o por danos morais": {"custas": "R$ 200-500", "honorarios": "20-30%", "tempo": "18-24 meses"},
            "revis√£o contrato banc√°rio": {"custas": "R$ 300-800", "honorarios": "20-30%", "tempo": "24-36 meses"},
            "a√ß√£o consignat√≥ria": {"custas": "1% valor", "honorarios": "10-15%", "tempo": "6-12 meses"}
        }
        
        self.jurisprudencia_relevante = {
            "indeniza√ß√£o por danos morais": [
                "STJ S√∫mula 385 - Cadastros restritivos",
                "STJ REsp 1.740.868 - Quantum indenizat√≥rio",
                "TJSP S√∫mula 67 - Dano moral banc√°rio"
            ],
            "revis√£o contrato banc√°rio": [
                "STJ S√∫mula 596 - Capitaliza√ß√£o de juros",
                "STJ REsp 973.827 - Spread banc√°rio",
                "TJSP - Revisional de contratos"
            ]
        }
    
    def _inicializar_criterios_analise(self):
        """Inicializa crit√©rios de an√°lise"""
        
        self.criterios_risco = {
            RiscoProcessual.BAIXO: {"score_min": 7.0, "atendimento_min": 0.8},
            RiscoProcessual.MEDIO: {"score_min": 5.0, "atendimento_min": 0.6},
            RiscoProcessual.ALTO: {"score_min": 3.0, "atendimento_min": 0.4},
            RiscoProcessual.CRITICO: {"score_min": 0.0, "atendimento_min": 0.0}
        }
        
        self.valores_referencia = {
            "dano_moral_negativacao": {"min": 3000, "max": 15000, "medio": 8000},
            "dano_moral_protesto": {"min": 5000, "max": 20000, "medio": 12000},
            "dano_moral_banco_dados": {"min": 2000, "max": 10000, "medio": 6000}
        }
    
    def analisar_caso_completo(self, texto_peticao: str, tipo_acao: str) -> AnaliseJuridicaCompleta:
        """
        üéØ AN√ÅLISE COMPLETA DO CASO JUR√çDICO
        An√°lise profunda que supera concorrentes
        """
        
        id_analise = self._gerar_id_analise()
        
        # An√°lise de requisitos
        requisitos = self._analisar_requisitos_legais(texto_peticao, tipo_acao)
        percentual_atendimento = self._calcular_percentual_atendimento(requisitos)
        
        # An√°lise de probabilidade
        analise_prob = self._analisar_probabilidade_sucesso(texto_peticao, tipo_acao, requisitos)
        
        # Gerar recomenda√ß√µes
        recomendacoes = self._gerar_recomendacoes_estrategicas(texto_peticao, tipo_acao, requisitos, analise_prob)
        
        # An√°lise estrat√©gica
        analise_estrategica = self._realizar_analise_estrategica(texto_peticao, tipo_acao, analise_prob)
        
        # Calcular risco e score geral
        nivel_risco = self._calcular_nivel_risco(percentual_atendimento, analise_prob.exito_total)
        score_geral = self._calcular_score_geral(percentual_atendimento, analise_prob.exito_total, len(recomendacoes))
        
        # Gerar resumo executivo
        resumo = self._gerar_resumo_executivo(tipo_acao, percentual_atendimento, analise_prob, nivel_risco)
        
        return AnaliseJuridicaCompleta(
            id_analise=id_analise,
            data_analise=datetime.now(),
            tipo_acao=tipo_acao,
            resumo_executivo=resumo,
            requisitos_legais=requisitos,
            percentual_atendimento=percentual_atendimento,
            analise_probabilidade=analise_prob,
            recomendacoes=recomendacoes,
            analise_estrategica=analise_estrategica,
            nivel_risco=nivel_risco,
            score_geral=score_geral
        )
    
    def _gerar_id_analise(self) -> str:
        """Gera ID √∫nico para an√°lise"""
        import hashlib
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        hash_obj = hashlib.md5(timestamp.encode())
        return f"ANALISE_{timestamp}_{hash_obj.hexdigest()[:8]}"
    
    def _analisar_requisitos_legais(self, texto: str, tipo_acao: str) -> List[RequisitoLegal]:
        """Analisa requisitos legais espec√≠ficos"""
        
        requisitos_base = self.requisitos_por_acao.get(tipo_acao, [])
        requisitos_analisados = []
        
        for req in requisitos_base:
            req_copy = RequisitoLegal(
                nome=req.nome,
                descricao=req.descricao,
                obrigatorio=req.obrigatorio,
                categoria=req.categoria
            )
            
            # Verificar se requisito est√° atendido
            req_copy.atendido, req_copy.evidencias, req_copy.observacoes = self._verificar_requisito(
                texto, req.nome, tipo_acao
            )
            
            requisitos_analisados.append(req_copy)
        
        return requisitos_analisados
    
    def _verificar_requisito(self, texto: str, nome_requisito: str, tipo_acao: str) -> Tuple[bool, List[str], str]:
        """Verifica se um requisito espec√≠fico est√° atendido"""
        
        texto_lower = texto.lower()
        evidencias = []
        observacoes = ""
        atendido = False
        
        # Verifica√ß√µes espec√≠ficas por requisito
        if nome_requisito == "conduta_ilicita":
            padroes = ["negativa√ß√£o", "protesto", "inscri√ß√£o indevida", "erro", "falha"]
            evidencias = [p for p in padroes if p in texto_lower]
            atendido = len(evidencias) > 0
            observacoes = f"Encontrados {len(evidencias)} indicadores de conduta il√≠cita"
        
        elif nome_requisito == "dano_moral":
            padroes = ["constrangimento", "abalo", "sofrimento", "humilha√ß√£o", "vexame", "transtorno"]
            evidencias = [p for p in padroes if p in texto_lower]
            atendido = len(evidencias) > 0
            observacoes = f"Identificados {len(evidencias)} elementos de dano moral"
        
        elif nome_requisito == "nexo_causal":
            padroes = ["em raz√£o", "decorrente", "causado por", "resultado", "consequ√™ncia"]
            evidencias = [p for p in padroes if p in texto_lower]
            atendido = len(evidencias) > 0
            observacoes = "Nexo causal " + ("estabelecido" if atendido else "n√£o claramente estabelecido")
        
        elif nome_requisito == "documentos_probatorios":
            padroes = ["anexo", "junta", "documento", "comprovante", "certid√£o"]
            evidencias = [p for p in padroes if p in texto_lower]
            atendido = len(evidencias) > 0
            observacoes = f"Refer√™ncias a {len(evidencias)} tipos de documentos"
        
        elif nome_requisito == "qualificacao_partes":
            padroes = ["cpf", "cnpj", "rg", "endere√ßo", "brasileiro", "portador"]
            evidencias = [p for p in padroes if p in texto_lower]
            atendido = len(evidencias) >= 2
            observacoes = f"Qualifica√ß√£o {'completa' if atendido else 'incompleta'}"
        
        elif nome_requisito == "valor_indenizacao":
            valores = re.findall(r'r\$\s*[\d.,]+', texto_lower)
            evidencias = valores
            atendido = len(valores) > 0
            observacoes = f"{'Valor especificado' if atendido else 'Valor n√£o especificado'}"
        
        elif nome_requisito == "titulo_executivo":
            padroes = ["contrato", "nota promiss√≥ria", "duplicata", "t√≠tulo", "instrumento"]
            evidencias = [p for p in padroes if p in texto_lower]
            atendido = len(evidencias) > 0
            observacoes = f"{'T√≠tulo identificado' if atendido else 'T√≠tulo n√£o claramente identificado'}"
        
        elif nome_requisito == "valor_atualizado":
            padroes = ["c√°lculo", "atualiza√ß√£o", "corre√ß√£o", "juros", "√≠ndice"]
            evidencias = [p for p in padroes if p in texto_lower]
            atendido = len(evidencias) >= 2
            observacoes = f"C√°lculo {'detalhado' if atendido else 'simplificado'}"
        
        elif nome_requisito == "deposito_inicial":
            padroes = ["dep√≥sito", "consigna√ß√£o", "valor depositado"]
            evidencias = [p for p in padroes if p in texto_lower]
            atendido = "dep√≥sito" in texto_lower or "consigna√ß√£o" in texto_lower
            observacoes = f"Dep√≥sito {'mencionado' if atendido else 'n√£o mencionado'}"
        
        else:
            # Verifica√ß√£o gen√©rica
            palavras_chave = nome_requisito.replace("_", " ").split()
            encontradas = sum(1 for palavra in palavras_chave if palavra in texto_lower)
            atendido = encontradas >= len(palavras_chave) // 2
            observacoes = f"Verifica√ß√£o gen√©rica: {encontradas}/{len(palavras_chave)} palavras encontradas"
        
        return atendido, evidencias[:5], observacoes
    
    def _calcular_percentual_atendimento(self, requisitos: List[RequisitoLegal]) -> float:
        """Calcula percentual de atendimento dos requisitos"""
        
        if not requisitos:
            return 0.0
        
        # Separar obrigat√≥rios e opcionais
        obrigatorios = [r for r in requisitos if r.obrigatorio]
        opcionais = [r for r in requisitos if not r.obrigatorio]
        
        # Calcular pontua√ß√£o
        pontos_obrigatorios = sum(2 if r.atendido else 0 for r in obrigatorios)
        pontos_opcionais = sum(1 if r.atendido else 0 for r in opcionais)
        
        total_possivel = len(obrigatorios) * 2 + len(opcionais) * 1
        total_obtido = pontos_obrigatorios + pontos_opcionais
        
        return total_obtido / max(total_possivel, 1)
    
    def _analisar_probabilidade_sucesso(self, texto: str, tipo_acao: str, requisitos: List[RequisitoLegal]) -> AnaliseProbabilidade:
        """Analisa probabilidade de sucesso do caso"""
        
        # Probabilidade base
        config_prob = self.probabilidades_sucesso.get(tipo_acao, {"base": 0.5})
        prob_base = config_prob["base"]
        
        # Analisar fatores positivos e negativos
        fatores_pos = []
        fatores_neg = []
        ajuste_prob = 0.0
        
        texto_lower = texto.lower()
        
        # Verificar fatores espec√≠ficos
        if "fatores_positivos" in config_prob:
            for fator, valor in config_prob["fatores_positivos"].items():
                if self._verificar_fator(fator, texto_lower):
                    fatores_pos.append(fator.replace("_", " ").title())
                    ajuste_prob += valor
        
        if "fatores_negativos" in config_prob:
            for fator, valor in config_prob["fatores_negativos"].items():
                if self._verificar_fator(fator, texto_lower):
                    fatores_neg.append(fator.replace("_", " ").title())
                    ajuste_prob += valor
        
        # Ajuste baseado nos requisitos
        req_obrigatorios_atendidos = sum(1 for r in requisitos if r.obrigatorio and r.atendido)
        req_obrigatorios_total = sum(1 for r in requisitos if r.obrigatorio)
        
        if req_obrigatorios_total > 0:
            ajuste_requisitos = (req_obrigatorios_atendidos / req_obrigatorios_total - 0.5) * 0.2
            ajuste_prob += ajuste_requisitos
        
        # Calcular probabilidades finais
        prob_total = max(0.05, min(0.95, prob_base + ajuste_prob))
        prob_parcial = min(0.90, prob_total + 0.15)
        prob_improcedencia = 1.0 - prob_total
        
        # Buscar precedentes
        precedentes_fav = self.jurisprudencia_relevante.get(tipo_acao, [])
        precedentes_cont = []  # Seria populado com an√°lise mais avan√ßada
        
        return AnaliseProbabilidade(
            exito_total=prob_total,
            exito_parcial=prob_parcial,
            risco_improcedencia=prob_improcedencia,
            fatores_positivos=fatores_pos,
            fatores_negativos=fatores_neg,
            precedentes_favoraveis=precedentes_fav,
            precedentes_contrarios=precedentes_cont
        )
    
    def _verificar_fator(self, fator: str, texto: str) -> bool:
        """Verifica presen√ßa de fator espec√≠fico no texto"""
        
        mapeamento_fatores = {
            "negativacao_indevida": ["negativa√ß√£o indevida", "inscri√ß√£o indevida", "cadastro indevido"],
            "protesto_indevido": ["protesto indevido", "protesto irregular"],
            "erro_banco_dados": ["erro", "falha sistema", "problema banco dados"],
            "negativacao_anterior": ["negativa√ß√£o anterior", "registro anterior", "hist√≥rico"],
            "debito_existente": ["d√©bito", "d√≠vida", "pend√™ncia financeira"],
            "titulo_executivo": ["t√≠tulo executivo", "documento assinado", "confiss√£o d√≠vida"],
            "juros_abusivos": ["juros abusivos", "taxa excessiva", "spread alto"],
            "prescricao": ["prescri√ß√£o", "prescrito", "prazo decorrido"],
            "documento_original": ["original", "via original", "documento aut√™ntico"]
        }
        
        palavras_chave = mapeamento_fatores.get(fator, [fator.replace("_", " ")])
        return any(palavra in texto for palavra in palavras_chave)
    
    def _gerar_recomendacoes_estrategicas(self, texto: str, tipo_acao: str, 
                                        requisitos: List[RequisitoLegal], 
                                        prob: AnaliseProbabilidade) -> List[RecomendacaoEstrategica]:
        """Gera recomenda√ß√µes estrat√©gicas personalizadas"""
        
        recomendacoes = []
        
        # Recomenda√ß√µes baseadas em requisitos n√£o atendidos
        for req in requisitos:
            if req.obrigatorio and not req.atendido:
                rec = self._criar_recomendacao_requisito(req, tipo_acao)
                if rec:
                    recomendacoes.append(rec)
        
        # Recomenda√ß√µes espec√≠ficas por tipo de a√ß√£o
        recomendacoes.extend(self._gerar_recomendacoes_especificas(tipo_acao, texto, prob))
        
        # Recomenda√ß√µes probat√≥rias
        recomendacoes.extend(self._gerar_recomendacoes_probatorias(texto, tipo_acao, prob))
        
        # Recomenda√ß√µes estrat√©gicas gerais
        recomendacoes.extend(self._gerar_recomendacoes_gerais(prob, tipo_acao))
        
        return sorted(recomendacoes, key=lambda x: {"alta": 3, "media": 2, "baixa": 1}[x.prioridade], reverse=True)[:10]
    
    def _criar_recomendacao_requisito(self, requisito: RequisitoLegal, tipo_acao: str) -> Optional[RecomendacaoEstrategica]:
        """Cria recomenda√ß√£o baseada em requisito n√£o atendido"""
        
        mapeamento_recomendacoes = {
            "qualificacao_partes": RecomendacaoEstrategica(
                tipo=TipoRecomendacao.PROCESSUAL,
                prioridade="alta",
                titulo="Completar Qualifica√ß√£o das Partes",
                descricao="Incluir CPF/CNPJ, RG, endere√ßo completo e demais dados de qualifica√ß√£o conforme CPC Art. 319, II",
                prazo_sugerido="Antes da protocoliza√ß√£o",
                fundamentacao=["CPC Art. 319, II", "Requisito essencial da peti√ß√£o inicial"]
            ),
            
            "documentos_probatorios": RecomendacaoEstrategica(
                tipo=TipoRecomendacao.PROBATORIA,
                prioridade="alta",
                titulo="Juntar Documentos Comprobat√≥rios",
                descricao="Anexar todos os documentos que fundamentam os fatos alegados (CPC Art. 320)",
                prazo_sugerido="Com a peti√ß√£o inicial",
                fundamentacao=["CPC Art. 320", "CPC Art. 396"]
            ),
            
            "valor_indenizacao": RecomendacaoEstrategica(
                tipo=TipoRecomendacao.SUBSTANTIVA,
                prioridade="media",
                titulo="Fundamentar Valor da Indeniza√ß√£o",
                descricao="Especificar e fundamentar o valor pleiteado com base em precedentes e crit√©rios objetivos",
                fundamentacao=["Precedentes TJSP", "Princ√≠pio da proporcionalidade"]
            ),
            
            "titulo_executivo": RecomendacaoEstrategica(
                tipo=TipoRecomendacao.PROBATORIA,
                prioridade="alta",
                titulo="Juntar T√≠tulo Executivo ou Documento da D√≠vida",
                descricao="Apresentar documento que comprove a exist√™ncia e exigibilidade da obriga√ß√£o",
                prazo_sugerido="Com a peti√ß√£o inicial",
                fundamentacao=["CPC Art. 320", "Prova da obriga√ß√£o"]
            )
        }
        
        return mapeamento_recomendacoes.get(requisito.nome)
    
    def _gerar_recomendacoes_especificas(self, tipo_acao: str, texto: str, prob: AnaliseProbabilidade) -> List[RecomendacaoEstrategica]:
        """Gera recomenda√ß√µes espec√≠ficas por tipo de a√ß√£o"""
        
        recomendacoes = []
        
        if tipo_acao == "indeniza√ß√£o por danos morais":
            # Valor da indeniza√ß√£o
            if "valor" not in texto.lower():
                recomendacoes.append(RecomendacaoEstrategica(
                    tipo=TipoRecomendacao.SUBSTANTIVA,
                    prioridade="alta",
                    titulo="Definir Valor da Indeniza√ß√£o por Dano Moral",
                    descricao="Estabelecer valor entre R$ 3.000,00 e R$ 15.000,00 para casos de negativa√ß√£o indevida, baseado na jurisprud√™ncia do TJSP",
                    impacto_probabilidade=0.1,
                    fundamentacao=["TJSP S√∫mula 67", "Precedentes recentes"]
                ))
            
            # S√∫mula 385 do STJ
            if "s√∫mula 385" not in texto.lower() and any("anterior" in fator.lower() for fator in prob.fatores_negativos):
                recomendacoes.append(RecomendacaoEstrategica(
                    tipo=TipoRecomendacao.ESTRATEGICA,
                    prioridade="alta",
                    titulo="Analisar Aplica√ß√£o da S√∫mula 385 STJ",
                    descricao="Verificar se h√° anota√ß√£o restritiva anterior que possa impedir a indeniza√ß√£o por dano moral",
                    impacto_probabilidade=-0.2,
                    fundamentacao=["STJ S√∫mula 385"]
                ))
        
        elif tipo_acao == "revis√£o contrato banc√°rio":
            recomendacoes.append(RecomendacaoEstrategica(
                tipo=TipoRecomendacao.PROBATORIA,
                prioridade="alta",
                titulo="Solicitar Per√≠cia Cont√°bil",
                descricao="Requerer per√≠cia para c√°lculo dos valores cobrados indevidamente e elabora√ß√£o de planilha revisional",
                custo_estimado="R$ 2.000,00 - R$ 5.000,00",
                impacto_probabilidade=0.15,
                fundamentacao=["CPC Art. 465", "Necessidade t√©cnica"]
            ))
        
        elif tipo_acao == "a√ß√£o de cobran√ßa":
            if prob.risco_improcedencia > 0.3:
                recomendacoes.append(RecomendacaoEstrategica(
                    tipo=TipoRecomendacao.ESTRATEGICA,
                    prioridade="media",
                    titulo="Considerar Acordo Extrajudicial",
                    descricao="Dado o risco de improced√™ncia, avaliar possibilidade de acordo antes do ajuizamento",
                    impacto_probabilidade=0.0,
                    fundamentacao=["Economia processual", "Redu√ß√£o de custos"]
                ))
        
        return recomendacoes
    
    def _gerar_recomendacoes_probatorias(self, texto: str, tipo_acao: str, prob: AnaliseProbabilidade) -> List[RecomendacaoEstrategica]:
        """Gera recomenda√ß√µes probat√≥rias"""
        
        recomendacoes = []
        
        # Testemunhas
        if "testemunha" not in texto.lower() and tipo_acao in ["indeniza√ß√£o por danos morais"]:
            recomendacoes.append(RecomendacaoEstrategica(
                tipo=TipoRecomendacao.PROBATORIA,
                prioridade="media",
                titulo="Arrolar Testemunhas",
                descricao="Indicar testemunhas que possam comprovar o constrangimento e abalo moral sofrido",
                prazo_sugerido="15 dias ap√≥s cita√ß√£o do r√©u",
                fundamentacao=["CPC Art. 357", "Prova testemunhal"]
            ))
        
        # Documentos espec√≠ficos
        if tipo_acao == "indeniza√ß√£o por danos morais":
            if "extrato" not in texto.lower():
                recomendacoes.append(RecomendacaoEstrategica(
                    tipo=TipoRecomendacao.PROBATORIA,
                    prioridade="alta",
                    titulo="Juntar Extratos dos √ìrg√£os de Prote√ß√£o",
                    descricao="Apresentar extratos atualizados do Serasa, SPC e SCPC comprovando a negativa√ß√£o",
                    fundamentacao=["Prova documental essencial"]
                ))
        
        return recomendacoes
    
    def _gerar_recomendacoes_gerais(self, prob: AnaliseProbabilidade, tipo_acao: str) -> List[RecomendacaoEstrategica]:
        """Gera recomenda√ß√µes estrat√©gicas gerais"""
        
        recomendacoes = []
        
        # Tutela antecipada
        if tipo_acao in ["a√ß√£o consignat√≥ria", "revis√£o contrato banc√°rio"]:
            recomendacoes.append(RecomendacaoEstrategica(
                tipo=TipoRecomendacao.CAUTELAR,
                prioridade="media",
                titulo="Avaliar Pedido de Tutela Antecipada",
                descricao="Considerar pedido de tutela para suspender cobran√ßa ou negativa√ß√£o durante o processo",
                fundamentacao=["CPC Art. 300", "Urg√™ncia e probabilidade do direito"]
            ))
        
        # Justi√ßa gratuita
        if "justi√ßa gratuita" not in tipo_acao.lower():
            recomendacoes.append(RecomendacaoEstrategica(
                tipo=TipoRecomendacao.PROCESSUAL,
                prioridade="baixa",
                titulo="Requerer Benef√≠cios da Justi√ßa Gratuita",
                descricao="Solicitar isen√ß√£o de custas processuais se presentes os requisitos legais",
                fundamentacao=["Lei 1.060/50", "CPC Art. 98"]
            ))
        
        # Media√ß√£o/Concilia√ß√£o
        if prob.risco_improcedencia > 0.4:
            recomendacoes.append(RecomendacaoEstrategica(
                tipo=TipoRecomendacao.ESTRATEGICA,
                prioridade="media",
                titulo="Priorizar Acordo em Audi√™ncia",
                descricao="Dado o risco processual, focar esfor√ßos na obten√ß√£o de acordo favor√°vel",
                impacto_probabilidade=0.0,
                fundamentacao=["Redu√ß√£o de riscos", "Economia de tempo e custos"]
            ))
        
        return recomendacoes
    
    def _realizar_analise_estrategica(self, texto: str, tipo_acao: str, prob: AnaliseProbabilidade) -> AnaliseEstrategica:
        """Realiza an√°lise estrat√©gica completa"""
        
        # Estimar valor de condena√ß√£o
        valor_estimado = self._estimar_valor_condenacao(texto, tipo_acao, prob)
        
        # Estimar tempo de processo
        tempo_estimado = self.custos_estimados.get(tipo_acao, {}).get("tempo", "18-24 meses")
        
        # Estimar custas
        custas_estimadas = self.custos_estimados.get(tipo_acao, {}).get("custas", "Vari√°vel")
        
        # Estrat√©gias recomendadas
        estrategias = self._gerar_estrategias_processo(tipo_acao, prob)
        
        # Riscos identificados
        riscos = self._identificar_riscos_processo(tipo_acao, prob)
        
        # Oportunidades
        oportunidades = self._identificar_oportunidades(tipo_acao, prob)
        
        return AnaliseEstrategica(
            valor_estimado_condenacao=valor_estimado,
            tempo_estimado_processo=tempo_estimado,
            custas_estimadas=custas_estimadas,
            probabilidade_sucesso=prob,
            estrategias_recomendadas=estrategias,
            riscos_identificados=riscos,
            oportunidades=oportunidades
        )
    
    def _estimar_valor_condenacao(self, texto: str, tipo_acao: str, prob: AnaliseProbabilidade) -> Optional[str]:
        """Estima valor prov√°vel de condena√ß√£o"""
        
        if tipo_acao == "indeniza√ß√£o por danos morais":
            # Buscar se h√° valor espec√≠fico no texto
            valores = re.findall(r'r\$\s*([\d.,]+)', texto.lower())
            
            if valores:
                try:
                    valor_pedido = float(valores[0].replace('.', '').replace(',', '.'))
                    # Aplicar probabilidade de sucesso
                    valor_estimado = valor_pedido * prob.exito_total
                    return f"R$ {valor_estimado:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
                except:
                    pass
            
            # Valor baseado em refer√™ncias
            if "negativa√ß√£o" in texto.lower():
                base = self.valores_referencia["dano_moral_negativacao"]["medio"]
                valor_estimado = base * prob.exito_total
                return f"R$ {valor_estimado:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
        
        return None
    
    def _gerar_estrategias_processo(self, tipo_acao: str, prob: AnaliseProbabilidade) -> List[str]:
        """Gera estrat√©gias recomendadas para o processo"""
        
        estrategias = []
        
        if prob.exito_total > 0.7:
            estrategias.append("üéØ Estrat√©gia ofensiva - alta probabilidade de sucesso")
            estrategias.append("üí™ Ser firme nas sustenta√ß√µes e pedidos")
        elif prob.exito_total > 0.5:
            estrategias.append("‚öñÔ∏è Estrat√©gia equilibrada - focar em pontos fortes")
            estrategias.append("ü§ù Estar aberto a acordos vantajosos")
        else:
            estrategias.append("üõ°Ô∏è Estrat√©gia defensiva - minimizar riscos")
            estrategias.append("ü§ù Priorizar acordo para reduzir perdas")
        
        # Estrat√©gias espec√≠ficas
        if tipo_acao == "indeniza√ß√£o por danos morais":
            estrategias.append("üìä Fundamentar valor com base em precedentes similares")
            estrategias.append("üîç Comprovar efetivamente o dano moral sofrido")
        
        elif tipo_acao == "revis√£o contrato banc√°rio":
            estrategias.append("üßÆ Investir em per√≠cia cont√°bil de qualidade")
            estrategias.append("üìã Demonstrar abusividade das cl√°usulas contestadas")
        
        return estrategias[:5]
    
    def _identificar_riscos_processo(self, tipo_acao: str, prob: AnaliseProbabilidade) -> List[str]:
        """Identifica riscos do processo"""
        
        riscos = []
        
        # Riscos gerais
        if prob.risco_improcedencia > 0.3:
            riscos.append(f"‚ö†Ô∏è Risco de improced√™ncia: {prob.risco_improcedencia:.1%}")
        
        if prob.fatores_negativos:
            riscos.append(f"‚ùå Fatores negativos identificados: {', '.join(prob.fatores_negativos)}")
        
        # Riscos espec√≠ficos
        if tipo_acao == "indeniza√ß√£o por danos morais":
            if any("anterior" in fator.lower() for fator in prob.fatores_negativos):
                riscos.append("üìã S√∫mula 385 STJ pode impedir indeniza√ß√£o")
            
            riscos.append("üí∞ Risco de redu√ß√£o do valor pleiteado pelo ju√≠zo")
        
        elif tipo_acao == "a√ß√£o de cobran√ßa":
            riscos.append("‚è∞ Risco de alega√ß√£o de prescri√ß√£o pela defesa")
            riscos.append("üìÑ Questionamento da validade dos documentos")
        
        elif tipo_acao == "revis√£o contrato banc√°rio":
            riscos.append("üßÆ Depend√™ncia de per√≠cia cont√°bil favor√°vel")
            riscos.append("‚öñÔ∏è Jurisprud√™ncia consolidada pr√≥-bancos em alguns aspectos")
        
        return riscos[:6]
    
    def _identificar_oportunidades(self, tipo_acao: str, prob: AnaliseProbabilidade) -> List[str]:
        """Identifica oportunidades no caso"""
        
        oportunidades = []
        
        # Oportunidades gerais
        if prob.fatores_positivos:
            oportunidades.append(f"‚úÖ Fatores favor√°veis: {', '.join(prob.fatores_positivos)}")
        
        if prob.precedentes_favoraveis:
            oportunidades.append("üìö Precedentes favor√°veis dispon√≠veis")
        
        # Oportunidades espec√≠ficas
        if tipo_acao == "indeniza√ß√£o por danos morais":
            oportunidades.append("üéØ Tend√™ncia de valoriza√ß√£o do dano moral na jurisprud√™ncia")
            oportunidades.append("‚ö° Processo relativamente r√°pido em JEC")
        
        elif tipo_acao == "revis√£o contrato banc√°rio":
            oportunidades.append("üìà Crescente prote√ß√£o ao consumidor pelo Judici√°rio")
            oportunidades.append("üîç Possibilidade de descobrir outras irregularidades na per√≠cia")
        
        elif tipo_acao == "a√ß√£o de cobran√ßa":
            if prob.exito_total > 0.6:
                oportunidades.append("üí∞ Alta probabilidade de recupera√ß√£o do cr√©dito")
                oportunidades.append("‚ö° Possibilidade de execu√ß√£o imediata ap√≥s senten√ßa")
        
        return oportunidades[:5]
    
    def _calcular_nivel_risco(self, percentual_atendimento: float, prob_sucesso: float) -> RiscoProcessual:
        """Calcula n√≠vel de risco geral do processo"""
        
        score_combinado = (percentual_atendimento + prob_sucesso) / 2
        
        if score_combinado >= 0.8:
            return RiscoProcessual.BAIXO
        elif score_combinado >= 0.6:
            return RiscoProcessual.MEDIO
        elif score_combinado >= 0.4:
            return RiscoProcessual.ALTO
        else:
            return RiscoProcessual.CRITICO
    
    def _calcular_score_geral(self, percentual_atendimento: float, prob_sucesso: float, num_recomendacoes: int) -> float:
        """Calcula score geral do caso (0-10)"""
        
        # Score base (60% peso)
        score_base = (percentual_atendimento * 0.4 + prob_sucesso * 0.6) * 6
        
        # Bonus por baixo n√∫mero de recomenda√ß√µes (caso bem estruturado)
        bonus_estrutura = max(0, (10 - num_recomendacoes) * 0.2)
        
        # Score final
        score_final = min(10.0, score_base + bonus_estrutura)
        
        return round(score_final, 1)
    
    def _gerar_resumo_executivo(self, tipo_acao: str, percentual_atendimento: float, 
                              prob: AnaliseProbabilidade, nivel_risco: RiscoProcessual) -> str:
        """Gera resumo executivo da an√°lise"""
        
        # Determinar tom do resumo
        if prob.exito_total >= 0.7:
            perspectiva = "FAVOR√ÅVEL"
            emoji = "‚úÖ"
        elif prob.exito_total >= 0.5:
            perspectiva = "MODERADA"
            emoji = "‚öñÔ∏è"
        else:
            perspectiva = "DESFAVOR√ÅVEL"
            emoji = "‚ö†Ô∏è"
        
        resumo = f"""
{emoji} **PERSPECTIVA {perspectiva}** para {tipo_acao}

**Probabilidade de √äxito:** {prob.exito_total:.1%}
**Requisitos Atendidos:** {percentual_atendimento:.1%}
**N√≠vel de Risco:** {nivel_risco.value.upper()}

**Principais Fatores:**
"""
        
        if prob.fatores_positivos:
            resumo += f"‚úÖ Favor√°veis: {', '.join(prob.fatores_positivos[:2])}\n"
        
        if prob.fatores_negativos:
            resumo += f"‚ùå Desfavor√°veis: {', '.join(prob.fatores_negativos[:2])}\n"
        
        # Recomenda√ß√£o principal
        if prob.exito_total >= 0.6:
            resumo += "\n**RECOMENDA√á√ÉO:** Prosseguir com o processo, observando as sugest√µes t√©cnicas."
        elif prob.exito_total >= 0.4:
            resumo += "\n**RECOMENDA√á√ÉO:** Avaliar cuidadosamente custos x benef√≠cios. Considerar acordo."
        else:
            resumo += "\n**RECOMENDA√á√ÉO:** Alto risco. Reavaliar estrat√©gia ou buscar acordo."
        
        return resumo.strip()
    
    def exportar_relatorio_completo(self, analise: AnaliseJuridicaCompleta, caminho: str) -> str:
        """Exporta relat√≥rio completo da an√°lise"""
        
        relatorio = f"""
# AN√ÅLISE JUR√çDICA COMPLETA
**ID da An√°lise:** {analise.id_analise}
**Data:** {analise.data_analise.strftime('%d/%m/%Y %H:%M')}
**Tipo de A√ß√£o:** {analise.tipo_acao}

## RESUMO EXECUTIVO
{analise.resumo_executivo}

**Score Geral:** {analise.score_geral}/10
**N√≠vel de Risco:** {analise.nivel_risco.value.upper()}

## AN√ÅLISE DE REQUISITOS LEGAIS
**Percentual de Atendimento:** {analise.percentual_atendimento:.1%}

### Requisitos Obrigat√≥rios
"""
        
        for req in analise.requisitos_legais:
            if req.obrigatorio:
                status = "‚úÖ ATENDIDO" if req.atendido else "‚ùå PENDENTE"
                relatorio += f"- **{req.nome.replace('_', ' ').title()}:** {status}\n"
                if req.observacoes:
                    relatorio += f"  - {req.observacoes}\n"
        
        relatorio += "\n### Requisitos Opcionais\n"
        
        for req in analise.requisitos_legais:
            if not req.obrigatorio:
                status = "‚úÖ ATENDIDO" if req.atendido else "‚≠ï OPCIONAL"
                relatorio += f"- **{req.nome.replace('_', ' ').title()}:** {status}\n"
        
        relatorio += f"""
## AN√ÅLISE DE PROBABILIDADE
**√äxito Total:** {analise.analise_probabilidade.exito_total:.1%}
**√äxito Parcial:** {analise.analise_probabilidade.exito_parcial:.1%}
**Risco de Improced√™ncia:** {analise.analise_probabilidade.risco_improcedencia:.1%}

### Fatores Favor√°veis
"""
        
        for fator in analise.analise_probabilidade.fatores_positivos:
            relatorio += f"- ‚úÖ {fator}\n"
        
        relatorio += "\n### Fatores Desfavor√°veis\n"
        
        for fator in analise.analise_probabilidade.fatores_negativos:
            relatorio += f"- ‚ùå {fator}\n"
        
        relatorio += f"""
## AN√ÅLISE ESTRAT√âGICA
**Valor Estimado:** {analise.analise_estrategica.valor_estimado_condenacao or 'N√£o aplic√°vel'}
**Tempo Estimado:** {analise.analise_estrategica.tempo_estimado_processo}
**Custas Estimadas:** {analise.analise_estrategica.custas_estimadas}

### Estrat√©gias Recomendadas
"""
        
        for estrategia in analise.analise_estrategica.estrategias_recomendadas:
            relatorio += f"- {estrategia}\n"
        
        relatorio += "\n### Riscos Identificados\n"
        
        for risco in analise.analise_estrategica.riscos_identificados:
            relatorio += f"- {risco}\n"
        
        relatorio += "\n### Oportunidades\n"
        
        for oportunidade in analise.analise_estrategica.oportunidades:
            relatorio += f"- {oportunidade}\n"
        
        relatorio += f"""
## RECOMENDA√á√ïES ESTRAT√âGICAS ({len(analise.recomendacoes)})
"""
        
        for i, rec in enumerate(analise.recomendacoes, 1):
            prioridade_emoji = {"alta": "üî¥", "media": "üü°", "baixa": "üü¢"}[rec.prioridade]
            
            relatorio += f"""
### {i}. {rec.titulo} {prioridade_emoji}
**Prioridade:** {rec.prioridade.upper()}
**Tipo:** {rec.tipo.value.title()}
**Descri√ß√£o:** {rec.descricao}
"""
            
            if rec.prazo_sugerido:
                relatorio += f"**Prazo:** {rec.prazo_sugerido}\n"
            
            if rec.custo_estimado:
                relatorio += f"**Custo:** {rec.custo_estimado}\n"
            
            if rec.fundamentacao:
                relatorio += "**Fundamenta√ß√£o:**\n"
                for fund in rec.fundamentacao:
                    relatorio += f"- {fund}\n"
        
        relatorio += f"""
## PRECEDENTES APLIC√ÅVEIS
"""
        
        for precedente in analise.analise_probabilidade.precedentes_favoraveis:
            relatorio += f"- ‚úÖ {precedente}\n"
        
        relatorio += """
---
*Relat√≥rio gerado pelo Sistema de An√°lise Jur√≠dica Avan√ßada*
*Esta an√°lise √© baseada em algoritmos e deve ser complementada pela an√°lise humana especializada*
"""
        
        # Salvar arquivo
        caminho_arquivo = Path(caminho)
        caminho_arquivo.parent.mkdir(parents=True, exist_ok=True)
        
        with open(caminho_arquivo, 'w', encoding='utf-8') as f:
            f.write(relatorio)
        
        return str(caminho_arquivo)