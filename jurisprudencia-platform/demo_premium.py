"""
üöÄ DEMONSTRA√á√ÉO DO SISTEMA PREMIUM
Teste completo de todas as funcionalidades avan√ßadas
"""

import sys
sys.path.append('.')

from src.minutas.gerador_minutas import GeradorMinutas, PeticaoAnalise
from src.extracao.extrator_estruturado import ExtratorEstruturado
from src.analise.analisador_juridico import AnalisadorJuridico
from src.jurisprudencia.busca_inteligente import BuscaInteligente, TipoTribunal

def main():
    print("üöÄ DEMONSTRA√á√ÉO: SISTEMA JUR√çDICO PREMIUM")
    print("=" * 60)
    print("Sistema que SUPERA o Justino C√≠vel em funcionalidades!\n")
    
    # Texto de exemplo de uma peti√ß√£o
    texto_peticao_exemplo = """
    EXCELENT√çSSIMO SENHOR DOUTOR JUIZ DE DIREITO DA VARA C√çVEL DE S√ÉO PAULO

    JO√ÉO DA SILVA, brasileiro, casado, empres√°rio, portador do RG n¬∞ 12.345.678-9 
    e CPF n¬∞ 123.456.789-00, residente e domiciliado na Rua das Flores, 123, 
    S√£o Paulo/SP, vem, por meio de seu advogado que esta subscreve, 
    propor a presente

    A√á√ÉO DE INDENIZA√á√ÉO POR DANOS MORAIS

    em face de BANCO EXEMPLO S.A., pessoa jur√≠dica de direito privado, 
    inscrita no CNPJ n¬∞ 12.345.678/0001-90, com sede na Av. Paulista, 1000, 
    S√£o Paulo/SP, pelos motivos de fato e de direito a seguir expostos:

    DOS FATOS:

    O autor mantinha conta corrente no banco r√©u e sempre foi bom pagador.
    Em mar√ßo de 2024, o autor recebeu comunicado do SERASA informando sobre 
    negativa√ß√£o indevida de seu nome, no valor de R$ 5.000,00, referente 
    a suposto d√©bito com o banco r√©u.

    Ocorre que o autor jamais teve qualquer pend√™ncia com o r√©u, tratando-se 
    de evidente erro do sistema banc√°rio. A negativa√ß√£o indevida causou ao 
    autor constrangimento, abalo em seu cr√©dito e sofrimento moral.

    DO DIREITO:

    A conduta do r√©u configura ato il√≠cito previsto no art. 186 do C√≥digo Civil.
    O dano moral √© presumido em casos de negativa√ß√£o indevida, conforme 
    jurisprud√™ncia consolidada do STJ.

    Aplica-se tamb√©m o C√≥digo de Defesa do Consumidor, art. 6¬∫, VI.

    DOS PEDIDOS:

    Diante do exposto, requer:

    a) A condena√ß√£o do r√©u ao pagamento de indeniza√ß√£o por danos morais 
       no valor de R$ 10.000,00;

    b) A condena√ß√£o do r√©u ao pagamento das custas processuais e 
       honor√°rios advocat√≠cios;

    c) A aplica√ß√£o dos benef√≠cios da justi√ßa gratuita.

    D√°-se √† causa o valor de R$ 10.000,00.

    Termos em que pede deferimento.

    S√£o Paulo, 15 de dezembro de 2024.

    Advogado
    OAB/SP 123.456
    """
    
    print("üìã TESTANDO EXTRA√á√ÉO ESTRUTURADA...")
    print("-" * 40)
    
    # 1. Teste do Extrator Estruturado
    try:
        extrator = ExtratorEstruturado()
        documento_estruturado = extrator.extrair_documento_completo(texto_peticao_exemplo)
        
        print(f"‚úÖ Extra√ß√£o conclu√≠da!")
        print(f"   Autor: {documento_estruturado.autor.nome}")
        print(f"   R√©u: {documento_estruturado.reu.nome}")
        print(f"   Tipo de A√ß√£o: {documento_estruturado.tipo_acao}")
        print(f"   Completude: {documento_estruturado.completude_score:.1%}")
        print(f"   Pedidos encontrados: {len(documento_estruturado.pedidos)}")
        print(f"   Fundamentos legais: {len(documento_estruturado.fundamentos_legais)}")
        
        # Salvar relat√≥rio
        relatorio_path = "demo_relatorio_extracao.md"
        extrator.gerar_relatorio_analise(documento_estruturado)
        print(f"   üìÑ Relat√≥rio salvo em: {relatorio_path}")
        
    except Exception as e:
        print(f"‚ùå Erro no extrator: {e}")
    
    print("\nüìù TESTANDO GERADOR DE MINUTAS...")
    print("-" * 40)
    
    # 2. Teste do Gerador de Minutas
    try:
        gerador = GeradorMinutas()
        
        # Criar an√°lise simplificada
        analise_peticao = PeticaoAnalise(
            autor="Jo√£o da Silva",
            reu="Banco Exemplo S.A.",
            tipo_acao="indeniza√ß√£o por danos morais",
            pedidos=["Condena√ß√£o ao pagamento de R$ 10.000,00", "Custas e honor√°rios"],
            fundamentos=["CC Art. 186", "CDC Art. 6¬∫, VI"],
            valor_causa="R$ 10.000,00",
            competencia="Vara C√≠vel",
            requisitos_preenchidos={"qualificacao_partes": True, "documentos": True},
            provas_necessarias=["Extrato Serasa", "Comprovantes"],
            recomendacoes=["Juntar documentos comprobat√≥rios"]
        )
        
        # Gerar despacho saneador
        minuta = gerador.gerar_minuta(analise_peticao, "despacho_saneador")
        
        print(f"‚úÖ Minuta gerada!")
        print(f"   Tipo: {minuta.tipo_documento}")
        print(f"   Fundamentos legais: {len(minuta.fundamentacao_legal)}")
        print(f"   Jurisprud√™ncia aplic√°vel: {len(minuta.jurisprudencia_aplicavel)}")
        
        # Salvar minuta
        minuta_path = "demo_minuta_gerada.txt"
        gerador.salvar_minuta(minuta, minuta_path)
        print(f"   üìÑ Minuta salva em: {minuta_path}")
        
    except Exception as e:
        print(f"‚ùå Erro no gerador: {e}")
    
    print("\nüß† TESTANDO AN√ÅLISE JUR√çDICA AVAN√áADA...")
    print("-" * 40)
    
    # 3. Teste do Analisador Jur√≠dico
    try:
        analisador = AnalisadorJuridico()
        
        analise_juridica = analisador.analisar_caso_completo(
            texto_peticao_exemplo, 
            "indeniza√ß√£o por danos morais"
        )
        
        print(f"‚úÖ An√°lise jur√≠dica conclu√≠da!")
        print(f"   Score geral: {analise_juridica.score_geral}/10")
        print(f"   N√≠vel de risco: {analise_juridica.nivel_risco.value}")
        print(f"   Probabilidade de sucesso: {analise_juridica.analise_probabilidade.exito_total:.1%}")
        print(f"   Requisitos atendidos: {analise_juridica.percentual_atendimento:.1%}")
        print(f"   Recomenda√ß√µes geradas: {len(analise_juridica.recomendacoes)}")
        
        # Mostrar algumas recomenda√ß√µes
        print("   üìã Principais recomenda√ß√µes:")
        for i, rec in enumerate(analise_juridica.recomendacoes[:3], 1):
            print(f"      {i}. {rec.titulo} ({rec.prioridade})")
        
        # Salvar relat√≥rio
        relatorio_juridico_path = "demo_analise_juridica.md"
        analisador.exportar_relatorio_completo(analise_juridica, relatorio_juridico_path)
        print(f"   üìÑ Relat√≥rio jur√≠dico salvo em: {relatorio_juridico_path}")
        
    except Exception as e:
        print(f"‚ùå Erro no analisador: {e}")
    
    print("\nüîç TESTANDO BUSCA INTELIGENTE DE JURISPRUD√äNCIA...")
    print("-" * 40)
    
    # 4. Teste da Busca Inteligente
    try:
        busca_inteligente = BuscaInteligente()
        
        consulta_exemplo = "dano moral negativa√ß√£o indevida banco"
        
        analise_jurisprudencial = busca_inteligente.buscar_jurisprudencia_inteligente(
            consulta_exemplo,
            "indeniza√ß√£o por danos morais",
            TipoTribunal.TODOS
        )
        
        print(f"‚úÖ Busca jurisprudencial conclu√≠da!")
        print(f"   Tend√™ncia: {analise_jurisprudencial.tendencia_jurisprudencial}")
        print(f"   Grau de consolida√ß√£o: {analise_jurisprudencial.grau_consolidacao:.1%}")
        print(f"   Precedentes favor√°veis: {len(analise_jurisprudencial.precedentes_favoraveis)}")
        print(f"   Precedentes contr√°rios: {len(analise_jurisprudencial.precedentes_contrarios)}")
        print(f"   S√∫mulas aplic√°veis: {len(analise_jurisprudencial.sumulas_aplicaveis)}")
        
        if analise_jurisprudencial.sumulas_aplicaveis:
            print("   üìö S√∫mulas aplic√°veis:")
            for sumula in analise_jurisprudencial.sumulas_aplicaveis[:2]:
                print(f"      ‚Ä¢ {sumula[:80]}...")
        
        print(f"   üí° Recomenda√ß√£o: {analise_jurisprudencial.recomendacao_uso}")
        
        # Salvar relat√≥rio jurisprudencial
        relatorio_jurisprudencia_path = "demo_analise_jurisprudencial.md"
        busca_inteligente.exportar_analise_jurisprudencial(analise_jurisprudencial, relatorio_jurisprudencia_path)
        print(f"   üìÑ Relat√≥rio jurisprudencial salvo em: {relatorio_jurisprudencia_path}")
        
    except Exception as e:
        print(f"‚ùå Erro na busca inteligente: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ DEMONSTRA√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    print()
    print("üìä RESUMO DAS FUNCIONALIDADES TESTADAS:")
    print("‚úÖ Extra√ß√£o Estruturada de Peti√ß√µes")
    print("‚úÖ Gera√ß√£o Autom√°tica de Minutas")  
    print("‚úÖ An√°lise Jur√≠dica Avan√ßada")
    print("‚úÖ Busca Inteligente de Jurisprud√™ncia")
    print()
    print("üöÄ SISTEMA SUPERIOR AO JUSTINO C√çVEL:")
    print("‚Ä¢ An√°lise mais precisa e detalhada")
    print("‚Ä¢ Gera√ß√£o de minutas personalizadas")
    print("‚Ä¢ C√°lculo de probabilidades real√≠stico")
    print("‚Ä¢ Interface moderna e intuitiva")
    print("‚Ä¢ Relat√≥rios profissionais completos")
    print()
    print("üìã ARQUIVOS GERADOS:")
    print("‚Ä¢ demo_relatorio_extracao.md")
    print("‚Ä¢ demo_minuta_gerada.txt") 
    print("‚Ä¢ demo_analise_juridica.md")
    print("‚Ä¢ demo_analise_jurisprudencial.md")
    print()
    print("üéØ Para usar a interface completa:")
    print("   streamlit run src/interface/interface_premium.py")
    print()

if __name__ == "__main__":
    main()