#!/usr/bin/env python3
"""
Script de teste para validar integra√ß√£o completa com Google Gemini 2.5 Flash Lite
"""

import os
import sys
from pathlib import Path

# Adicionar diret√≥rio src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from dotenv import load_dotenv
load_dotenv()

def test_gemini_client():
    """Testa cliente Gemini b√°sico"""
    print("\n=== TESTE 1: Cliente Gemini ===")
    
    try:
        from src.ai.gemini_client import GeminiClient, get_gemini_client
        
        # Testar inicializa√ß√£o
        client = get_gemini_client()
        print("‚úÖ Cliente Gemini inicializado com sucesso")
        
        # Testar gera√ß√£o simples
        resposta = client.generate(
            "Qual a diferen√ßa entre dano moral e dano material no direito brasileiro?",
            system_prompt="Responda de forma concisa e t√©cnica."
        )
        
        if resposta:
            print(f"‚úÖ Resposta gerada: {resposta[:200]}...")
        else:
            print("‚ùå Falha ao gerar resposta")
            
        # Testar estimativa de custo
        custo = client.estimate_cost("Texto de exemplo para an√°lise jur√≠dica")
        print(f"‚úÖ Estimativa de custo: ${custo['custo_total_usd']:.6f} USD / R$ {custo['custo_total_brl']:.4f}")
        
        # Testar estat√≠sticas
        stats = client.get_usage_stats()
        print(f"‚úÖ Estat√≠sticas: {stats['requests_ultimas_24h']} requests nas √∫ltimas 24h")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste do cliente: {e}")
        return False


def test_analisador_juridico():
    """Testa analisador jur√≠dico com Gemini"""
    print("\n=== TESTE 2: Analisador Jur√≠dico com Gemini ===")
    
    try:
        from src.analise.analisador_juridico import AnalisadorJuridico
        
        # Criar analisador com Gemini
        analisador = AnalisadorJuridico(use_ai=True, ai_provider="gemini")
        print("‚úÖ Analisador jur√≠dico inicializado com Gemini")
        
        # Testar an√°lise com IA
        texto_exemplo = """
        Trata-se de a√ß√£o de indeniza√ß√£o por danos morais em face de institui√ß√£o banc√°ria
        devido a negativa√ß√£o indevida do nome do autor nos √≥rg√£os de prote√ß√£o ao cr√©dito.
        O autor alega nunca ter mantido rela√ß√£o jur√≠dica com o r√©u.
        """
        
        analise_ia = analisador.analisar_com_ia(texto_exemplo, "resumo")
        
        if analise_ia:
            print(f"‚úÖ An√°lise com IA realizada")
            print(f"   Modelo: {analise_ia.get('modelo')}")
            print(f"   An√°lise: {analise_ia.get('analise', '')[:200]}...")
        else:
            print("‚ö†Ô∏è  An√°lise com IA n√£o dispon√≠vel (pode estar usando an√°lise local)")
            
        # Testar estimativa de custo
        custo = analisador.estimar_custo_ia(texto_exemplo)
        print(f"‚úÖ Custo estimado: R$ {custo['custo_brl']:.4f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste do analisador: {e}")
        return False


def test_gerador_minutas():
    """Testa gerador de minutas com Gemini"""
    print("\n=== TESTE 3: Gerador de Minutas com Gemini ===")
    
    try:
        from src.minutas.gerador_minutas import GeradorMinutas
        
        # Criar gerador com Gemini
        gerador = GeradorMinutas(use_ai=True, ai_provider="gemini")
        print("‚úÖ Gerador de minutas inicializado com Gemini")
        
        # Contexto para gera√ß√£o
        contexto = {
            "autor": "Jo√£o da Silva",
            "reu": "Banco XYZ S/A",
            "tipo_acao": "Indeniza√ß√£o por danos morais",
            "fatos": "Negativa√ß√£o indevida por d√≠vida inexistente",
            "valor_causa": "R$ 10.000,00"
        }
        
        # Testar gera√ß√£o com IA
        minuta = gerador.gerar_minuta_com_ia("peti√ß√£o inicial", contexto)
        
        if minuta:
            print("‚úÖ Minuta gerada com sucesso")
            print(f"   Tamanho: {len(minuta)} caracteres")
            print(f"   In√≠cio: {minuta[:150]}...")
        else:
            print("‚ö†Ô∏è  Gera√ß√£o com IA n√£o dispon√≠vel")
            
        # Testar estimativa de custo
        custo = gerador.estimar_custo_geracao(contexto)
        print(f"‚úÖ Custo estimado: R$ {custo['custo_brl']:.4f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste do gerador: {e}")
        return False


def test_busca_inteligente():
    """Testa busca inteligente com Gemini"""
    print("\n=== TESTE 4: Busca Inteligente com Gemini ===")
    
    try:
        from src.jurisprudencia.busca_inteligente import BuscaInteligente
        
        # Criar busca com Gemini
        busca = BuscaInteligente(use_ai=True, ai_provider="gemini")
        print("‚úÖ Busca inteligente inicializada com Gemini")
        
        # Testar busca contextual
        consulta = "dano moral negativa√ß√£o indevida s√∫mula 385"
        
        # Simular an√°lise (sem executar busca completa)
        from src.jurisprudencia.busca_inteligente import AnaliseJurisprudencial, PrecedenteJuridico
        from datetime import datetime
        
        analise_mock = AnaliseJurisprudencial(
            id_analise="TEST001",
            consulta_original=consulta,
            tipo_acao="indeniza√ß√£o por danos morais",
            data_analise=datetime.now(),
            precedentes_favoraveis=[],
            precedentes_contrarios=[],
            precedentes_neutros=[],
            tendencia_jurisprudencial="favor√°vel",
            grau_consolidacao=0.8,
            recomendacao_uso="Citar precedentes do STJ",
            sumulas_aplicaveis=["STJ S√∫mula 385"],
            orientacoes_tribunais=[],
            estatisticas={}
        )
        
        # Testar recomenda√ß√£o estrat√©gica
        recomendacao = busca.gerar_recomendacao_estrategica_ia(analise_mock)
        
        if recomendacao:
            print("‚úÖ Recomenda√ß√£o estrat√©gica gerada")
            print(f"   Tamanho: {len(recomendacao)} caracteres")
            print(f"   In√≠cio: {recomendacao[:150]}...")
        else:
            print("‚ö†Ô∏è  Recomenda√ß√£o com IA n√£o dispon√≠vel")
            
        # Testar estimativa de custo
        custo = busca.estimar_custo_busca_ia(consulta)
        print(f"‚úÖ Custo estimado: R$ {custo['custo_brl']:.4f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de busca: {e}")
        return False


def test_analise_documento_completa():
    """Teste integrado de an√°lise de documento jur√≠dico"""
    print("\n=== TESTE 5: An√°lise Completa de Documento ===")
    
    try:
        from src.ai.gemini_client import get_gemini_client
        
        client = get_gemini_client()
        
        documento = """
        EXCELENT√çSSIMO SENHOR DOUTOR JUIZ DE DIREITO DA ___ VARA C√çVEL DA COMARCA DE S√ÉO PAULO/SP
        
        JO√ÉO DA SILVA, brasileiro, solteiro, analista de sistemas, portador do RG n¬∫ 12.345.678-9 SSP/SP,
        inscrito no CPF sob n¬∫ 123.456.789-00, residente e domiciliado na Rua das Flores, n¬∫ 100,
        Jardim Primavera, S√£o Paulo/SP, CEP 01234-567, vem, respeitosamente, √† presen√ßa de Vossa
        Excel√™ncia, por seu advogado que esta subscreve, propor
        
        A√á√ÉO DE INDENIZA√á√ÉO POR DANOS MORAIS
        
        em face de BANCO XYZ S/A, institui√ß√£o financeira inscrita no CNPJ sob n¬∫ 12.345.678/0001-90,
        com sede na Avenida Paulista, n¬∫ 1000, S√£o Paulo/SP, pelos fatos e fundamentos a seguir expostos:
        
        DOS FATOS
        
        1. O autor foi surpreendido ao tentar realizar uma compra e ter seu cr√©dito negado, momento em
        que descobriu que seu nome estava inscrito nos √≥rg√£os de prote√ß√£o ao cr√©dito.
        
        2. Ao verificar, constatou que a negativa√ß√£o foi realizada pelo banco r√©u, referente a um suposto
        d√©bito no valor de R$ 5.432,10, contrato n¬∫ 987654321.
        
        3. Ocorre que o autor JAMAIS manteve qualquer rela√ß√£o jur√≠dica com o r√©u, n√£o tendo celebrado
        nenhum contrato ou utilizado qualquer servi√ßo da institui√ß√£o financeira.
        """
        
        # An√°lise completa
        analise = client.analyze_legal_document(documento, "completa")
        
        if analise:
            print("‚úÖ An√°lise completa realizada com sucesso")
            print(f"   Tipo: {analise['tipo_analise']}")
            print(f"   Modelo: {analise['modelo']}")
            print(f"   Tokens estimados: {analise['tokens_estimados']}")
            print("\nüìã An√°lise:")
            print(analise['analise'][:500] + "...")
        else:
            print("‚ùå Falha na an√°lise do documento")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de an√°lise completa: {e}")
        return False


def main():
    """Executa todos os testes"""
    print("üöÄ TESTE DE INTEGRA√á√ÉO GOOGLE GEMINI 2.5 FLASH LITE")
    print("=" * 60)
    
    # Verificar API key
    if not os.getenv("GOOGLE_API_KEY") and not os.getenv("GEMINI_API_KEY"):
        print("‚ùå ERRO: Configure GOOGLE_API_KEY ou GEMINI_API_KEY no arquivo .env")
        return
    
    # Executar testes
    testes = [
        test_gemini_client,
        test_analisador_juridico,
        test_gerador_minutas,
        test_busca_inteligente,
        test_analise_documento_completa
    ]
    
    resultados = []
    for teste in testes:
        try:
            sucesso = teste()
            resultados.append(sucesso)
        except Exception as e:
            print(f"‚ùå Erro ao executar {teste.__name__}: {e}")
            resultados.append(False)
    
    # Resumo
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print(f"‚úÖ Testes bem-sucedidos: {sum(resultados)}/{len(resultados)}")
    
    if all(resultados):
        print("\nüéâ TODOS OS TESTES PASSARAM! Gemini est√° totalmente integrado.")
    else:
        print("\n‚ö†Ô∏è  Alguns testes falharam. Verifique as mensagens acima.")
    
    # Informa√ß√µes de configura√ß√£o
    print("\nüìã CONFIGURA√á√ÉO ATUAL:")
    print(f"   Modelo: gemini-2.5-flash-lite")
    print(f"   API Key configurada: {'‚úÖ' if os.getenv('GOOGLE_API_KEY') or os.getenv('GEMINI_API_KEY') else '‚ùå'}")
    print(f"   Fallbacks dispon√≠veis: OpenAI {'‚úÖ' if os.getenv('OPENAI_API_KEY') else '‚ùå'}, Groq {'‚úÖ' if os.getenv('GROQ_API_KEY') else '‚ùå'}")


if __name__ == "__main__":
    main()