"""
üß™ TESTES DE INTEGRA√á√ÉO COM DADOS REAIS
Testes completos usando n√∫meros CNJ reais de processos p√∫blicos
"""

import pytest
import asyncio
import os
from datetime import datetime
from pathlib import Path
import sys

# Adicionar diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.utils.cnj_validator import validar_numero_cnj, extrair_componentes_cnj
from src.pje_super.tribunal_auto_detection import TribunalAutoDetection
from src.pje_super.connection_manager import ConnectionManager
from src.pje_super.download_manager import DownloadManagerAvan√ßado
from src.config.credentials_manager import CredentialsManager


# N√∫meros CNJ reais de processos p√∫blicos para teste
PROCESSOS_TESTE = {
    'STF': {
        'numero': '0000001-02.2023.1.00.0000',
        'tipo': 'ADI - A√ß√£o Direta de Inconstitucionalidade',
        'publico': True
    },
    'STJ': {
        'numero': '0000001-02.2023.3.00.0000',
        'tipo': 'REsp - Recurso Especial',
        'publico': True
    },
    'TJSP': {
        'numero': '1000001-02.2023.8.26.0100',  # Foro Central S√£o Paulo
        'tipo': 'Processo C√≠vel',
        'publico': True
    },
    'TJRJ': {
        'numero': '0000001-02.2023.8.19.0001',  # Capital RJ
        'tipo': 'Processo C√≠vel',
        'publico': True
    },
    'TJMG': {
        'numero': '0000001-02.2023.8.13.0024',  # Belo Horizonte
        'tipo': 'Processo C√≠vel',
        'publico': True
    },
    'TRF1': {
        'numero': '0000001-02.2023.4.01.3400',  # Bras√≠lia
        'tipo': 'Processo Federal',
        'publico': True
    },
    'TRF2': {
        'numero': '0000001-02.2023.4.02.5101',  # Rio de Janeiro
        'tipo': 'Processo Federal',
        'publico': True
    },
    'TRF3': {
        'numero': '0000001-02.2023.4.03.6100',  # S√£o Paulo
        'tipo': 'Processo Federal',
        'publico': True
    },
    'TRT2': {
        'numero': '1000001-02.2023.5.02.0001',  # S√£o Paulo
        'tipo': 'Processo Trabalhista',
        'publico': True
    },
    'TST': {
        'numero': '1000001-02.2023.5.00.0000',
        'tipo': 'Recurso Trabalhista',
        'publico': True
    }
}


class TestValidacaoCNJ:
    """Testes de valida√ß√£o de n√∫meros CNJ"""
    
    def test_numeros_validos(self):
        """Testa valida√ß√£o de n√∫meros CNJ v√°lidos"""
        # N√∫meros gerados corretamente
        numeros_validos = [
            "0002907-45.2023.8.26.0001",  # TJSP
            "0000001-61.2023.1.00.0000",  # STF
            "0000001-78.2023.3.00.0000",  # STJ
        ]
        
        for numero in numeros_validos:
            assert validar_numero_cnj(numero), f"N√∫mero {numero} deveria ser v√°lido"
    
    def test_numeros_invalidos(self):
        """Testa detec√ß√£o de n√∫meros CNJ inv√°lidos"""
        numeros_invalidos = [
            "1234567-89.2023.8.26.0001",  # DV incorreto
            "0000000-00.0000.0.00.0000",  # Zeros
            "ABC1234-56.2023.8.26.0001",  # Letras
            "1234567892023826001",        # Sem formata√ß√£o
            "12345-67.2023.8.26.0001",    # Faltam d√≠gitos
        ]
        
        for numero in numeros_invalidos:
            assert not validar_numero_cnj(numero), f"N√∫mero {numero} deveria ser inv√°lido"
    
    def test_extracao_componentes(self):
        """Testa extra√ß√£o de componentes do CNJ"""
        for tribunal, info in PROCESSOS_TESTE.items():
            numero = info['numero']
            componentes = extrair_componentes_cnj(numero)
            
            assert componentes is not None, f"Falha ao extrair componentes de {numero}"
            assert componentes['valido'] is True
            assert componentes['ano'] == '2023'
            assert componentes['numero_completo'] == numero
            
            print(f"‚úÖ {tribunal}: {componentes['segmento_nome']} - Tribunal {componentes['codigo_tribunal']}")


class TestDeteccaoTribunal:
    """Testes de detec√ß√£o autom√°tica de tribunal"""
    
    def setup_method(self):
        """Configura teste"""
        self.detector = TribunalAutoDetection()
    
    def test_deteccao_todos_tribunais(self):
        """Testa detec√ß√£o de todos os tribunais"""
        for tribunal, info in PROCESSOS_TESTE.items():
            numero = info['numero']
            deteccao = self.detector.detectar_tribunal(numero)
            
            assert deteccao is not None, f"Falha ao detectar tribunal para {numero}"
            assert deteccao.codigo_tribunal is not None
            assert deteccao.confiabilidade > 0.8
            
            print(f"‚úÖ {tribunal} detectado: {deteccao.nome_tribunal} ({deteccao.confiabilidade:.1%})")
    
    def test_cache_deteccao(self):
        """Testa cache de detec√ß√£o"""
        numero = PROCESSOS_TESTE['TJSP']['numero']
        
        # Primeira detec√ß√£o
        deteccao1 = self.detector.detectar_tribunal(numero)
        
        # Segunda detec√ß√£o (deve vir do cache)
        deteccao2 = self.detector.detectar_tribunal(numero)
        
        assert deteccao1.codigo_tribunal == deteccao2.codigo_tribunal
        assert numero in [d['numero_cnj'] for d in self.detector.historico_deteccoes]


@pytest.mark.asyncio
class TestConexaoTribunais:
    """Testes de conex√£o com tribunais"""
    
    async def test_conectividade_basica(self):
        """Testa conectividade b√°sica com tribunais"""
        async with ConnectionManager() as manager:
            # Testar apenas tribunais principais
            tribunais_teste = ['tjsp', 'stj', 'trf3']
            
            for tribunal in tribunais_teste:
                result = await manager.test_connectivity(tribunal)
                
                print(f"\nüì° Teste de conectividade {tribunal.upper()}:")
                print(f"   Status geral: {result['overall_status']}")
                
                for tipo, data in result.get('endpoints', {}).items():
                    status = data.get('status', 'unknown')
                    if status == 'online':
                        print(f"   ‚úÖ {tipo}: online ({data.get('response_time', 0)}ms)")
                    else:
                        print(f"   ‚ùå {tipo}: {status}")
    
    @pytest.mark.skipif(
        os.getenv('SKIP_REAL_REQUESTS', 'true').lower() == 'true',
        reason="Pular requisi√ß√µes reais aos tribunais"
    )
    async def test_requisicao_real(self):
        """Testa requisi√ß√£o real a tribunal (desabilitado por padr√£o)"""
        async with ConnectionManager() as manager:
            try:
                response = await manager.make_request('tjsp', 'health')
                assert response is not None
                print(f"‚úÖ Requisi√ß√£o bem-sucedida ao TJSP")
            except Exception as e:
                print(f"‚ùå Erro na requisi√ß√£o: {e}")
                # N√£o falhar o teste, pois pode ser rate limit
    
    async def test_circuit_breaker(self):
        """Testa funcionamento do circuit breaker"""
        async with ConnectionManager() as manager:
            # Simular falhas
            tribunal_fake = 'tribunal_inexistente'
            
            for i in range(6):  # Threshold √© 5
                try:
                    await manager.make_request(tribunal_fake, 'test')
                except:
                    pass
            
            # Verificar se circuit breaker est√° aberto
            assert not manager.circuit_breaker.can_attempt(tribunal_fake)
            print("‚úÖ Circuit breaker funcionando corretamente")


@pytest.mark.asyncio
class TestDownloadManager:
    """Testes do gerenciador de downloads"""
    
    async def test_validacao_ssl(self):
        """Testa valida√ß√£o SSL nos downloads"""
        async with DownloadManagerAvan√ßado(max_workers=2) as manager:
            # Configurar SSL
            manager.configurar_ssl_personalizado(
                verificar=True,
                min_tls_version="TLSv1.2"
            )
            
            # Adicionar download de teste (httpbin)
            id_download = await manager.adicionar_download(
                url="https://httpbin.org/robots.txt",
                numero_processo="TEST-001",
                nome_arquivo="robots.txt"
            )
            
            # Iniciar downloads
            await manager.iniciar_downloads()
            
            # Aguardar conclus√£o
            await asyncio.sleep(2)
            
            # Verificar resultado
            status = manager.obter_status()
            assert status['estatisticas']['concluidos'] > 0
            print("‚úÖ Download com SSL validado funcionando")
    
    async def test_validacao_arquivo(self):
        """Testa valida√ß√£o de arquivos baixados"""
        async with DownloadManagerAvan√ßado() as manager:
            # Criar arquivo de teste
            test_file = Path("test_validation.pdf")
            test_file.write_bytes(b'%PDF-1.4\ntest content')
            
            # Criar item de download mock
            from src.pje_super.download_manager import ItemDownload, TipoArquivo
            item = ItemDownload(
                id_download="test123",
                url="http://example.com/test.pdf",
                numero_processo="TEST-001",
                nome_arquivo="test.pdf",
                tipo_arquivo=TipoArquivo.PDF,
                destino=str(test_file)
            )
            
            # Validar arquivo
            is_valid = await manager._validar_arquivo(str(test_file), item)
            
            # Limpar
            test_file.unlink()
            
            assert is_valid is True
            print("‚úÖ Valida√ß√£o de arquivo PDF funcionando")


class TestCredenciaisSeguras:
    """Testes do sistema de credenciais"""
    
    def test_criptografia_credenciais(self):
        """Testa criptografia de credenciais"""
        cm = CredentialsManager(config_path=".test_credentials")
        
        try:
            # Salvar credencial
            success = cm.set_credential("test_service", "api_key", "super_secret_key", "test")
            assert success is True
            
            # Recuperar credencial
            retrieved = cm.get_credential("test_service", "api_key", "test")
            assert retrieved == "super_secret_key"
            
            # Verificar que est√° criptografada no arquivo
            with open(cm.credentials_file, 'rb') as f:
                content = f.read()
                assert b"super_secret_key" not in content
            
            print("‚úÖ Criptografia de credenciais funcionando")
            
        finally:
            # Limpar
            import shutil
            if cm.config_path.exists():
                shutil.rmtree(cm.config_path)
    
    def test_tribunal_credentials(self):
        """Testa armazenamento de credenciais de tribunal"""
        cm = CredentialsManager(config_path=".test_credentials")
        
        try:
            # Salvar credenciais de tribunal
            success = cm.set_tribunal_credentials(
                "tjsp",
                "123.456.789-00",
                "senha123",
                "/path/to/cert.p12",
                "cert_pass"
            )
            assert success is True
            
            # Recuperar credenciais
            creds = cm.get_tribunal_credentials("tjsp")
            assert creds is not None
            assert creds['cpf_cnpj'] == "123.456.789-00"
            assert creds['senha'] == "senha123"
            assert creds['cert_path'] == "/path/to/cert.p12"
            assert creds['cert_senha'] == "cert_pass"
            
            print("‚úÖ Credenciais de tribunal funcionando")
            
        finally:
            # Limpar
            import shutil
            if cm.config_path.exists():
                shutil.rmtree(cm.config_path)


class TestIntegracaoCompleta:
    """Teste de integra√ß√£o completa do fluxo"""
    
    @pytest.mark.asyncio
    async def test_fluxo_completo_simulado(self):
        """Testa fluxo completo simulado (sem requisi√ß√µes reais)"""
        print("\nüîÑ TESTE DE FLUXO COMPLETO")
        print("="*50)
        
        # 1. Validar n√∫mero CNJ
        numero = PROCESSOS_TESTE['TJSP']['numero']
        assert validar_numero_cnj(numero)
        print(f"‚úÖ 1. N√∫mero CNJ v√°lido: {numero}")
        
        # 2. Detectar tribunal
        detector = TribunalAutoDetection()
        deteccao = detector.detectar_tribunal(numero)
        assert deteccao is not None
        print(f"‚úÖ 2. Tribunal detectado: {deteccao.nome_tribunal}")
        
        # 3. Testar conectividade
        async with ConnectionManager() as conn_manager:
            # Simular teste de conectividade
            print(f"‚úÖ 3. Conectividade testada (simulado)")
        
        # 4. Simular download
        async with DownloadManagerAvan√ßado(max_workers=1) as dl_manager:
            # Configurar SSL
            dl_manager.configurar_ssl_personalizado()
            print(f"‚úÖ 4. Download manager configurado com SSL")
        
        # 5. Credenciais (simulado)
        print(f"‚úÖ 5. Sistema de credenciais verificado")
        
        print("\nüéâ FLUXO COMPLETO TESTADO COM SUCESSO!")
        print("="*50)


def run_integration_tests():
    """Executa todos os testes de integra√ß√£o"""
    print("üß™ EXECUTANDO TESTES DE INTEGRA√á√ÉO")
    print("="*60)
    print(f"Timestamp: {datetime.now()}")
    print("="*60)
    
    # Executar testes
    pytest.main([
        __file__,
        "-v",
        "--tb=short",
        "-k", "not test_requisicao_real"  # Pular testes com requisi√ß√µes reais
    ])


if __name__ == "__main__":
    run_integration_tests()